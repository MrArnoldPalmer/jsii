// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/ 1`] = `
<root>
 ‚îó‚îÅ üìÅ golang
    ‚îó‚îÅ üìÅ scopejsiicalcbase
       ‚î£‚îÅ üìÅ embeddedmodule
       ‚îÉ  ‚îó‚îÅ üìÑ embeddedmodule.go
       ‚îó‚îÅ üìÑ scopejsiicalcbase.go
`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/golang/scopejsiicalcbase/embeddedmodule/embeddedmodule.go 1`] = `
<root>
golang/scopejsiicalcbase/embeddedmodule/embeddedmodule.go is an embedded asset file
`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/golang/scopejsiicalcbase/scopejsiicalcbase.go 1`] = `
// An example direct dependency for jsii-calc.
package scopejsiicalcbase

import (
    __JSII__ "github.com/aws-cdk/jsii/jsii-experimental"
    "github.com/aws-cdk/jsii/jsii-calc/golang/scopejsiicalcbaseofbase"
    "github.com/aws-cdk/jsii/jsii-calc/golang/scopejsiicalcbase/embeddedmodule"
    "io/ioutil"
    "sync"
)

var once sync.Once
func JSII_LOAD__() {
    once.Do(func() {
        scopejsiicalcbaseofbase.JSII_LOAD__()

        tmpfile, err := ioutil.TempFile("", "*.tgz")
        if err != nil {
            panic(err)
        }
        if _, err := tmpfile.Write([]byte(embeddedmodule.Tarball)); err != nil {
            if err != nil {
                panic(err)
            }
        }
        if err := tmpfile.Close(); err != nil {
            if err != nil {
                panic(err)
            }
        }
        _, err = __JSII__.Load(__JSII__.LoadRequest {
            Api: "load",
            Name: "@scope/jsii-calc-base",
            Version: "0.0.0",
            Tarball: tmpfile.Name(),
        })
        if err != nil {
            panic(err)
        }
    })
}

// Class interface
type BaseIface interface {
    TypeName() __JSII__.Any
}

// A base class.
// Struct proxy
type Base struct {
    jsiiObjInstanceId string
}

func (obj *Base) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewBase() BaseIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "@scope/jsii-calc-base.Base",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := Base{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (b *Base) TypeName() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "typeName",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: b.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return nil
}

// BasePropsIface is the public interface for the custom type BaseProps
type BasePropsIface interface {
    GetFoo() scopejsiicalcbaseofbase.Very
    GetBar() string
}

// Struct proxy
type BaseProps struct {
    jsiiObjInstanceId string
    Foo scopejsiicalcbaseofbase.Very
    Bar string
}

func (b *BaseProps) GetFoo() scopejsiicalcbaseofbase.Very {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "foo",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: b.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return b.Foo
}

func (b *BaseProps) GetBar() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "bar",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: b.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return b.Bar
}


func (obj *BaseProps) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

type IBaseInterface interface {
    scopejsiicalcbaseofbase.IVeryBaseInterface
    Bar()
}


`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/ 1`] = `
<root>
 ‚îó‚îÅ üìÅ golang
    ‚îó‚îÅ üìÅ scopejsiicalcbaseofbase
       ‚î£‚îÅ üìÅ embeddedmodule
       ‚îÉ  ‚îó‚îÅ üìÑ embeddedmodule.go
       ‚îó‚îÅ üìÑ scopejsiicalcbaseofbase.go
`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/golang/scopejsiicalcbaseofbase/embeddedmodule/embeddedmodule.go 1`] = `
<root>
golang/scopejsiicalcbaseofbase/embeddedmodule/embeddedmodule.go is an embedded asset file
`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/golang/scopejsiicalcbaseofbase/scopejsiicalcbaseofbase.go 1`] = `
// An example transitive dependency for jsii-calc.
package scopejsiicalcbaseofbase

import (
    __JSII__ "github.com/aws-cdk/jsii/jsii-experimental"
    "github.com/aws-cdk/jsii/jsii-calc/golang/scopejsiicalcbaseofbase/embeddedmodule"
    "io/ioutil"
    "sync"
)

var once sync.Once
func JSII_LOAD__() {
    once.Do(func() {

        tmpfile, err := ioutil.TempFile("", "*.tgz")
        if err != nil {
            panic(err)
        }
        if _, err := tmpfile.Write([]byte(embeddedmodule.Tarball)); err != nil {
            if err != nil {
                panic(err)
            }
        }
        if err := tmpfile.Close(); err != nil {
            if err != nil {
                panic(err)
            }
        }
        _, err = __JSII__.Load(__JSII__.LoadRequest {
            Api: "load",
            Name: "@scope/jsii-calc-base-of-base",
            Version: "0.0.0",
            Tarball: tmpfile.Name(),
        })
        if err != nil {
            panic(err)
        }
    })
}

type IVeryBaseInterface interface {
    Foo()
}

// Class interface
type StaticConsumerIface interface {
}

// Struct proxy
type StaticConsumer struct {
    jsiiObjInstanceId string
}

func (obj *StaticConsumer) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func StaticConsumer_Consume(_args __JSII__.Any) {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "@scope/jsii-calc-base-of-base.StaticConsumer",
        Method: "consume",
        Args: []interface{}{_args},
    })
    if err != nil {
        panic(err)
    }
}

// Class interface
type VeryIface interface {
    Hey() float64
}

// Something here.
// Experimental.
// Struct proxy
type Very struct {
    jsiiObjInstanceId string
}

func (obj *Very) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewVery() VeryIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "@scope/jsii-calc-base-of-base.Very",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := Very{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (v *Very) Hey() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "hey",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: v.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return 0.0
}

// VeryBasePropsIface is the public interface for the custom type VeryBaseProps
type VeryBasePropsIface interface {
    GetFoo() Very
}

// Struct proxy
type VeryBaseProps struct {
    jsiiObjInstanceId string
    Foo Very
}

func (v *VeryBaseProps) GetFoo() Very {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "foo",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: v.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return v.Foo
}


func (obj *VeryBaseProps) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}


`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/ 1`] = `
<root>
 ‚îó‚îÅ üìÅ golang
    ‚îó‚îÅ üìÅ scopejsiicalclib
       ‚î£‚îÅ üìÅ embeddedmodule
       ‚îÉ  ‚îó‚îÅ üìÑ embeddedmodule.go
       ‚î£‚îÅ üìÑ scopejsiicalclib.go
       ‚îó‚îÅ üìÅ submodule
          ‚îó‚îÅ üìÑ submodule.go
`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/golang/scopejsiicalclib/embeddedmodule/embeddedmodule.go 1`] = `
<root>
golang/scopejsiicalclib/embeddedmodule/embeddedmodule.go is an embedded asset file
`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/golang/scopejsiicalclib/scopejsiicalclib.go 1`] = `
// A simple calcuator library built on JSII.
package scopejsiicalclib

import (
    __JSII__ "github.com/aws-cdk/jsii/jsii-experimental"
    "github.com/aws-cdk/jsii/jsii-calc/golang/scopejsiicalcbaseofbase"
    "github.com/aws-cdk/jsii/jsii-calc/golang/scopejsiicalcbase"
    "github.com/aws-cdk/jsii/jsii-calc/golang/scopejsiicalclib/embeddedmodule"
    "io/ioutil"
    "sync"
)

var once sync.Once
func JSII_LOAD__() {
    once.Do(func() {
        scopejsiicalcbase.JSII_LOAD__()
        scopejsiicalcbaseofbase.JSII_LOAD__()

        tmpfile, err := ioutil.TempFile("", "*.tgz")
        if err != nil {
            panic(err)
        }
        if _, err := tmpfile.Write([]byte(embeddedmodule.Tarball)); err != nil {
            if err != nil {
                panic(err)
            }
        }
        if err := tmpfile.Close(); err != nil {
            if err != nil {
                panic(err)
            }
        }
        _, err = __JSII__.Load(__JSII__.LoadRequest {
            Api: "load",
            Name: "@scope/jsii-calc-lib",
            Version: "0.0.0",
            Tarball: tmpfile.Name(),
        })
        if err != nil {
            panic(err)
        }
    })
}

// Check that enums from \\@scoped packages can be references.
// 
// See awslabs/jsii#138
// Deprecated.
type EnumFromScopedModule string

const (
    EnumFromScopedModuleValue1 EnumFromScopedModule = "VALUE1"
    EnumFromScopedModuleValue2 EnumFromScopedModule = "VALUE2"
)

// The general contract for a concrete number.
// Deprecated.
type IDoublable interface {
    // Deprecated.
    GetDoubleValue() float64
}

// Applies to classes that are considered friendly.
// 
// These classes can be greeted with
// a "hello" or "goodbye" blessing and they will respond back in a fun and friendly manner.
// Deprecated.
type IFriendly interface {
    // Say hello!
    // Deprecated.
    Hello() string
}

// Interface that inherits from packages 2 levels up the tree.
// 
// Their presence validates that .NET/Java/jsii-reflect can track all fields
// far enough up the tree.
// Deprecated.
type IThreeLevelsInterface interface {
    scopejsiicalcbaseofbase.IVeryBaseInterface
    scopejsiicalcbase.IBaseInterface
    // Deprecated.
    Baz()
}

// MyFirstStructIface is the public interface for the custom type MyFirstStruct
// Deprecated.
type MyFirstStructIface interface {
    GetAnumber() float64
    GetAstring() string
    GetFirstOptional() []string
}

// This is the first struct we have created in jsii.
// Deprecated.
// Struct proxy
type MyFirstStruct struct {
    jsiiObjInstanceId string
    // An awesome number value.
    // Deprecated.
    Anumber float64
    // A string value.
    // Deprecated.
    Astring string
    // Deprecated.
    FirstOptional []string
}

func (m *MyFirstStruct) GetAnumber() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "anumber",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: m.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return m.Anumber
}

func (m *MyFirstStruct) GetAstring() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "astring",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: m.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return m.Astring
}

func (m *MyFirstStruct) GetFirstOptional() []string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "firstOptional",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: m.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return m.FirstOptional
}


func (obj *MyFirstStruct) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Class interface
type NumberIface interface {
    IDoublable
    GetValue() float64
    SetValue(val float64)
    GetDoubleValue() float64
    SetDoubleValue(val float64)
    TypeName() __JSII__.Any
    ToString() string
}

// Represents a concrete number.
// Deprecated.
// Struct proxy
type Number struct {
    jsiiObjInstanceId string
    // The number.
    // Deprecated.
    Value float64
    // The number multiplied by 2.
    // Deprecated.
    DoubleValue float64
}

func (n *Number) GetValue() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "value",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return n.Value
}

func (n *Number) GetDoubleValue() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "doubleValue",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return n.DoubleValue
}


func (obj *Number) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Creates a Number object.
func NewNumber(value float64) NumberIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "@scope/jsii-calc-lib.Number",
        Interfaces: []string{"@scope/jsii-calc-lib.IDoublable"},
        Args: []interface{}{value},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := Number{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (n *Number) SetValue(val float64) {
    n.Value = val
}

func (n *Number) SetDoubleValue(val float64) {
    n.DoubleValue = val
}

func (n *Number) TypeName() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "typeName",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func (n *Number) ToString() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "toString",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

// Class interface
type NumericValueIface interface {
    GetValue() float64
    SetValue(val float64)
    TypeName() __JSII__.Any
    ToString() string
}

// Abstract class which represents a numeric value.
// Deprecated.
// Struct proxy
type NumericValue struct {
    jsiiObjInstanceId string
    // The value.
    // Deprecated.
    Value float64
}

func (n *NumericValue) GetValue() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "value",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return n.Value
}


func (obj *NumericValue) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewNumericValue() NumericValueIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "@scope/jsii-calc-lib.NumericValue",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := NumericValue{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (n *NumericValue) SetValue(val float64) {
    n.Value = val
}

func (n *NumericValue) TypeName() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "typeName",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func (n *NumericValue) ToString() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "toString",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

// Class interface
type OperationIface interface {
    GetValue() float64
    SetValue(val float64)
    TypeName() __JSII__.Any
    ToString() string
}

// Represents an operation on values.
// Deprecated.
// Struct proxy
type Operation struct {
    jsiiObjInstanceId string
    // The value.
    // Deprecated.
    Value float64
}

func (o *Operation) GetValue() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "value",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: o.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return o.Value
}


func (obj *Operation) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewOperation() OperationIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "@scope/jsii-calc-lib.Operation",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := Operation{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (o *Operation) SetValue(val float64) {
    o.Value = val
}

func (o *Operation) TypeName() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "typeName",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: o.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func (o *Operation) ToString() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "toString",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: o.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

// StructWithOnlyOptionalsIface is the public interface for the custom type StructWithOnlyOptionals
// Deprecated.
type StructWithOnlyOptionalsIface interface {
    GetOptional1() string
    GetOptional2() float64
    GetOptional3() bool
}

// This is a struct with only optional properties.
// Deprecated.
// Struct proxy
type StructWithOnlyOptionals struct {
    jsiiObjInstanceId string
    // The first optional!
    // Deprecated.
    Optional1 string
    // Deprecated.
    Optional2 float64
    // Deprecated.
    Optional3 bool
}

func (s *StructWithOnlyOptionals) GetOptional1() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "optional1",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.Optional1
}

func (s *StructWithOnlyOptionals) GetOptional2() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "optional2",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.Optional2
}

func (s *StructWithOnlyOptionals) GetOptional3() bool {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "optional3",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.Optional3
}


func (obj *StructWithOnlyOptionals) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}


`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/golang/scopejsiicalclib/submodule/submodule.go 1`] = `
package submodule

import (
    __JSII__ "github.com/aws-cdk/jsii/jsii-experimental"
)

// Deprecated.
type IReflectable interface {
    // Deprecated.
    GetEntries() []ReflectableEntry
}

// Class interface
type NestingClassIface interface {
}

// This class is here to show we can use nested classes across module boundaries.
// Deprecated.
// Struct proxy
type NestingClass struct {
    jsiiObjInstanceId string
}

func (obj *NestingClass) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Class interface
type NestedClassIface interface {
    GetProperty() string
    SetProperty(val string)
}

// This class is here to show we can use nested classes across module boundaries.
// Deprecated.
// Struct proxy
type NestedClass struct {
    jsiiObjInstanceId string
    // Deprecated.
    Property string
}

func (n *NestedClass) GetProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "property",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return n.Property
}


func (obj *NestedClass) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewNestedClass() NestedClassIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "@scope/jsii-calc-lib.submodule.NestingClass.NestedClass",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := NestedClass{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (n *NestedClass) SetProperty(val string) {
    n.Property = val
}

// NestedStructIface is the public interface for the custom type NestedStruct
// Deprecated.
type NestedStructIface interface {
    GetName() string
}

// This is a struct, nested within a class.
// 
// Normal.
// Deprecated.
// Struct proxy
type NestedStruct struct {
    jsiiObjInstanceId string
    // Deprecated.
    Name string
}

func (n *NestedStruct) GetName() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "name",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return n.Name
}


func (obj *NestedStruct) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// ReflectableEntryIface is the public interface for the custom type ReflectableEntry
// Deprecated.
type ReflectableEntryIface interface {
    GetKey() string
    GetValue() __JSII__.Any
}

// Deprecated.
// Struct proxy
type ReflectableEntry struct {
    jsiiObjInstanceId string
    // Deprecated.
    Key string
    // Deprecated.
    Value __JSII__.Any
}

func (r *ReflectableEntry) GetKey() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "key",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: r.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return r.Key
}

func (r *ReflectableEntry) GetValue() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "value",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: r.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return r.Value
}


func (obj *ReflectableEntry) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Class interface
type ReflectorIface interface {
    AsMap(reflectable IReflectable) map[string]__JSII__.Any
}

// Deprecated.
// Struct proxy
type Reflector struct {
    jsiiObjInstanceId string
}

func (obj *Reflector) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewReflector() ReflectorIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "@scope/jsii-calc-lib.submodule.Reflector",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := Reflector{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (r *Reflector) AsMap(reflectable IReflectable) map[string]__JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "asMap",
        Args: []interface{}{reflectable},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: r.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return nil
}


`;

exports[`Generated code for "jsii-calc": <outDir>/ 1`] = `
<root>
 ‚îó‚îÅ üìÅ golang
    ‚îó‚îÅ üìÅ jsiicalc
       ‚î£‚îÅ üìÅ composition
       ‚îÉ  ‚îó‚îÅ üìÑ composition.go
       ‚î£‚îÅ üìÅ derivedclasshasnoproperties
       ‚îÉ  ‚îó‚îÅ üìÑ derivedclasshasnoproperties.go
       ‚î£‚îÅ üìÅ embeddedmodule
       ‚îÉ  ‚îó‚îÅ üìÑ embeddedmodule.go
       ‚î£‚îÅ üìÅ interfaceinnamespaceincludesclasses
       ‚îÉ  ‚îó‚îÅ üìÑ interfaceinnamespaceincludesclasses.go
       ‚î£‚îÅ üìÅ interfaceinnamespaceonlyinterface
       ‚îÉ  ‚îó‚îÅ üìÑ interfaceinnamespaceonlyinterface.go
       ‚î£‚îÅ üìÑ jsiicalc.go
       ‚î£‚îÅ üìÅ pythonself
       ‚îÉ  ‚îó‚îÅ üìÑ pythonself.go
       ‚î£‚îÅ üìÑ README.md
       ‚îó‚îÅ üìÅ submodule
          ‚î£‚îÅ üìÑ backreferences.go
          ‚î£‚îÅ üìÑ child.go
          ‚î£‚îÅ üìÑ deeplynested.go
          ‚î£‚îÅ üìÑ isolated.go
          ‚î£‚îÅ üìÑ nestedsubmodule.go
          ‚îó‚îÅ üìÑ submodule.go
`;

exports[`Generated code for "jsii-calc": <outDir>/golang/jsiicalc/README.md 1`] = `
# jsii Calculator

This library is used to demonstrate and test the features of JSII

## How to use running sum API:

First, create a calculator:

\`\`\`ts
const calculator = new calc.Calculator();
\`\`\`

Then call some operations:


\`\`\`ts fixture=with-calculator
calculator.add(10);
\`\`\`

## Code Samples

\`\`\`ts
/* This is totes a magic comment in here, just you wait! */
const foo = 'bar';
\`\`\`


`;

exports[`Generated code for "jsii-calc": <outDir>/golang/jsiicalc/composition/composition.go 1`] = `
package composition

import (
    __JSII__ "github.com/aws-cdk/jsii/jsii-experimental"
    "github.com/aws-cdk/jsii/jsii-calc/golang/scopejsiicalclib"
)

// Class interface
type CompositeOperationIface interface {
    GetValue() float64
    SetValue(val float64)
    GetExpression() scopejsiicalclib.NumericValue
    SetExpression(val scopejsiicalclib.NumericValue)
    GetDecorationPostfixes() []string
    SetDecorationPostfixes(val []string)
    GetDecorationPrefixes() []string
    SetDecorationPrefixes(val []string)
    GetStringStyle() CompositionStringStyle
    SetStringStyle(val CompositionStringStyle)
    TypeName() __JSII__.Any
    ToString() string
}

// Abstract operation composed from an expression of other operations.
// Struct proxy
type CompositeOperation struct {
    jsiiObjInstanceId string
    // (deprecated) The value.
    Value float64
    // The expression that this operation consists of.
    // 
    // Must be implemented by derived classes.
    Expression scopejsiicalclib.NumericValue
    // A set of postfixes to include in a decorated .toString().
    DecorationPostfixes []string
    // A set of prefixes to include in a decorated .toString().
    DecorationPrefixes []string
    // The .toString() style.
    StringStyle CompositionStringStyle
}

func (c *CompositeOperation) GetValue() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "value",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.Value
}

func (c *CompositeOperation) GetExpression() scopejsiicalclib.NumericValue {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "expression",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.Expression
}

func (c *CompositeOperation) GetDecorationPostfixes() []string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "decorationPostfixes",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.DecorationPostfixes
}

func (c *CompositeOperation) GetDecorationPrefixes() []string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "decorationPrefixes",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.DecorationPrefixes
}

func (c *CompositeOperation) GetStringStyle() CompositionStringStyle {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "stringStyle",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.StringStyle
}


func (obj *CompositeOperation) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewCompositeOperation() CompositeOperationIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.composition.CompositeOperation",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := CompositeOperation{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (c *CompositeOperation) SetValue(val float64) {
    c.Value = val
}

func (c *CompositeOperation) SetExpression(val scopejsiicalclib.NumericValue) {
    c.Expression = val
}

func (c *CompositeOperation) SetDecorationPostfixes(val []string) {
    c.DecorationPostfixes = val
}

func (c *CompositeOperation) SetDecorationPrefixes(val []string) {
    c.DecorationPrefixes = val
}

func (c *CompositeOperation) SetStringStyle(val CompositionStringStyle) {
    c.StringStyle = val
}

func (c *CompositeOperation) TypeName() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "typeName",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func (c *CompositeOperation) ToString() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "toString",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

// Style of .toString() output for CompositeOperation.
type CompositionStringStyle string

const (
    CompositionStringStyleNormal CompositionStringStyle = "NORMAL"
    CompositionStringStyleDecorated CompositionStringStyle = "DECORATED"
)


`;

exports[`Generated code for "jsii-calc": <outDir>/golang/jsiicalc/derivedclasshasnoproperties/derivedclasshasnoproperties.go 1`] = `
package derivedclasshasnoproperties

import (
    __JSII__ "github.com/aws-cdk/jsii/jsii-experimental"
)

// Class interface
type BaseIface interface {
    GetProp() string
    SetProp(val string)
}

// Struct proxy
type Base struct {
    jsiiObjInstanceId string
    Prop string
}

func (b *Base) GetProp() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "prop",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: b.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return b.Prop
}


func (obj *Base) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewBase() BaseIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.DerivedClassHasNoProperties.Base",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := Base{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (b *Base) SetProp(val string) {
    b.Prop = val
}

// Class interface
type DerivedIface interface {
    GetProp() string
    SetProp(val string)
}

// Struct proxy
type Derived struct {
    jsiiObjInstanceId string
    Prop string
}

func (d *Derived) GetProp() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "prop",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.Prop
}


func (obj *Derived) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewDerived() DerivedIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.DerivedClassHasNoProperties.Derived",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := Derived{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (d *Derived) SetProp(val string) {
    d.Prop = val
}


`;

exports[`Generated code for "jsii-calc": <outDir>/golang/jsiicalc/embeddedmodule/embeddedmodule.go 1`] = `
<root>
golang/jsiicalc/embeddedmodule/embeddedmodule.go is an embedded asset file
`;

exports[`Generated code for "jsii-calc": <outDir>/golang/jsiicalc/interfaceinnamespaceincludesclasses/interfaceinnamespaceincludesclasses.go 1`] = `
package interfaceinnamespaceincludesclasses

import (
    __JSII__ "github.com/aws-cdk/jsii/jsii-experimental"
)

// Class interface
type FooIface interface {
    GetBar() string
    SetBar(val string)
}

// Struct proxy
type Foo struct {
    jsiiObjInstanceId string
    Bar string
}

func (f *Foo) GetBar() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "bar",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: f.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return f.Bar
}


func (obj *Foo) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewFoo() FooIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.InterfaceInNamespaceIncludesClasses.Foo",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := Foo{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (f *Foo) SetBar(val string) {
    f.Bar = val
}

// HelloIface is the public interface for the custom type Hello
type HelloIface interface {
    GetFoo() float64
}

// Struct proxy
type Hello struct {
    jsiiObjInstanceId string
    Foo float64
}

func (h *Hello) GetFoo() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "foo",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: h.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return h.Foo
}


func (obj *Hello) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}


`;

exports[`Generated code for "jsii-calc": <outDir>/golang/jsiicalc/interfaceinnamespaceonlyinterface/interfaceinnamespaceonlyinterface.go 1`] = `
package interfaceinnamespaceonlyinterface

import (
    __JSII__ "github.com/aws-cdk/jsii/jsii-experimental"
)

// HelloIface is the public interface for the custom type Hello
type HelloIface interface {
    GetFoo() float64
}

// Struct proxy
type Hello struct {
    jsiiObjInstanceId string
    Foo float64
}

func (h *Hello) GetFoo() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "foo",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: h.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return h.Foo
}


func (obj *Hello) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}


`;

exports[`Generated code for "jsii-calc": <outDir>/golang/jsiicalc/jsiicalc.go 1`] = `
// A simple calcuator built on JSII.
package jsiicalc

import (
    __JSII__ "github.com/aws-cdk/jsii/jsii-experimental"
    "github.com/aws-cdk/jsii/jsii-calc/golang/scopejsiicalclib"
    "github.com/aws-cdk/jsii/jsii-calc/golang/jsiicalc/composition"
    "github.com/aws-cdk/jsii/jsii-calc/golang/scopejsiicalcbaseofbase"
    "github.com/aws-cdk/jsii/jsii-calc/golang/scopejsiicalcbase"
    "github.com/aws-cdk/jsii/jsii-calc/golang/scopejsiicalclib/submodule"
    "github.com/aws-cdk/jsii/jsii-calc/golang/jsiicalc/embeddedmodule"
    "io/ioutil"
    "sync"
)

var once sync.Once
func JSII_LOAD__() {
    once.Do(func() {
        scopejsiicalcbase.JSII_LOAD__()
        scopejsiicalcbaseofbase.JSII_LOAD__()
        scopejsiicalclib.JSII_LOAD__()

        tmpfile, err := ioutil.TempFile("", "*.tgz")
        if err != nil {
            panic(err)
        }
        if _, err := tmpfile.Write([]byte(embeddedmodule.Tarball)); err != nil {
            if err != nil {
                panic(err)
            }
        }
        if err := tmpfile.Close(); err != nil {
            if err != nil {
                panic(err)
            }
        }
        _, err = __JSII__.Load(__JSII__.LoadRequest {
            Api: "load",
            Name: "jsii-calc",
            Version: "0.0.0",
            Tarball: tmpfile.Name(),
        })
        if err != nil {
            panic(err)
        }
    })
}

// Class interface
type AbstractClassIface interface {
    IInterfaceImplementedByAbstractClass
    GetAbstractProperty() string
    SetAbstractProperty(val string)
    GetPropFromInterface() string
    SetPropFromInterface(val string)
    AbstractMethod(name string) string
    NonAbstractMethod() float64
}

// Struct proxy
type AbstractClass struct {
    jsiiObjInstanceId string
    AbstractProperty string
    PropFromInterface string
}

func (a *AbstractClass) GetAbstractProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "abstractProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return a.AbstractProperty
}

func (a *AbstractClass) GetPropFromInterface() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "propFromInterface",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return a.PropFromInterface
}


func (obj *AbstractClass) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewAbstractClass() AbstractClassIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.AbstractClass",
        Interfaces: []string{"jsii-calc.IInterfaceImplementedByAbstractClass"},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := AbstractClass{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (a *AbstractClass) SetAbstractProperty(val string) {
    a.AbstractProperty = val
}

func (a *AbstractClass) SetPropFromInterface(val string) {
    a.PropFromInterface = val
}

func (a *AbstractClass) AbstractMethod(name string) string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "abstractMethod",
        Args: []interface{}{name},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

func (a *AbstractClass) NonAbstractMethod() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "nonAbstractMethod",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return 0.0
}

// Class interface
type AbstractClassBaseIface interface {
    GetAbstractProperty() string
    SetAbstractProperty(val string)
}

// Struct proxy
type AbstractClassBase struct {
    jsiiObjInstanceId string
    AbstractProperty string
}

func (a *AbstractClassBase) GetAbstractProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "abstractProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return a.AbstractProperty
}


func (obj *AbstractClassBase) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewAbstractClassBase() AbstractClassBaseIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.AbstractClassBase",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := AbstractClassBase{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (a *AbstractClassBase) SetAbstractProperty(val string) {
    a.AbstractProperty = val
}

// Class interface
type AbstractClassReturnerIface interface {
    GetReturnAbstractFromProperty() AbstractClassBase
    SetReturnAbstractFromProperty(val AbstractClassBase)
    GiveMeAbstract() AbstractClass
    GiveMeInterface() IInterfaceImplementedByAbstractClass
}

// Struct proxy
type AbstractClassReturner struct {
    jsiiObjInstanceId string
    ReturnAbstractFromProperty AbstractClassBase
}

func (a *AbstractClassReturner) GetReturnAbstractFromProperty() AbstractClassBase {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "returnAbstractFromProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return a.ReturnAbstractFromProperty
}


func (obj *AbstractClassReturner) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewAbstractClassReturner() AbstractClassReturnerIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.AbstractClassReturner",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := AbstractClassReturner{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (a *AbstractClassReturner) SetReturnAbstractFromProperty(val AbstractClassBase) {
    a.ReturnAbstractFromProperty = val
}

func (a *AbstractClassReturner) GiveMeAbstract() AbstractClass {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "giveMeAbstract",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return AbstractClass{}
}

func (a *AbstractClassReturner) GiveMeInterface() IInterfaceImplementedByAbstractClass {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "giveMeInterface",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return nil
}

// Class interface
type AbstractSuiteIface interface {
    GetProperty() string
    SomeMethod(str string) string
    WorkItAll(seed string) string
}

// Ensures abstract members implementations correctly register overrides in various languages.
// Struct proxy
type AbstractSuite struct {
    jsiiObjInstanceId string
    Property string
}

func (a *AbstractSuite) GetProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "property",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return a.Property
}


func (obj *AbstractSuite) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewAbstractSuite() AbstractSuiteIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.AbstractSuite",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := AbstractSuite{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (a *AbstractSuite) SetProperty(val string) {
    a.Property = val
}

func (a *AbstractSuite) SomeMethod(str string) string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "someMethod",
        Args: []interface{}{str},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

func (a *AbstractSuite) WorkItAll(seed string) string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "workItAll",
        Args: []interface{}{seed},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

// Class interface
type AddIface interface {
    scopejsiicalclib.IFriendly
    GetValue() float64
    SetValue(val float64)
    GetLhs() scopejsiicalclib.NumericValue
    SetLhs(val scopejsiicalclib.NumericValue)
    GetRhs() scopejsiicalclib.NumericValue
    SetRhs(val scopejsiicalclib.NumericValue)
    TypeName() __JSII__.Any
    ToString() string
    Hello() string
}

// The "+" binary operation.
// Struct proxy
type Add struct {
    jsiiObjInstanceId string
    // (deprecated) The value.
    Value float64
    // Left-hand side operand.
    Lhs scopejsiicalclib.NumericValue
    // Right-hand side operand.
    Rhs scopejsiicalclib.NumericValue
}

func (a *Add) GetValue() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "value",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return a.Value
}

func (a *Add) GetLhs() scopejsiicalclib.NumericValue {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "lhs",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return a.Lhs
}

func (a *Add) GetRhs() scopejsiicalclib.NumericValue {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "rhs",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return a.Rhs
}


func (obj *Add) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Creates a BinaryOperation.
func NewAdd(lhs scopejsiicalclib.NumericValue, rhs scopejsiicalclib.NumericValue) AddIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.Add",
        Interfaces: []string{},
        Args: []interface{}{lhs, rhs},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := Add{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (a *Add) SetValue(val float64) {
    a.Value = val
}

func (a *Add) SetLhs(val scopejsiicalclib.NumericValue) {
    a.Lhs = val
}

func (a *Add) SetRhs(val scopejsiicalclib.NumericValue) {
    a.Rhs = val
}

func (a *Add) TypeName() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "typeName",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func (a *Add) ToString() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "toString",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

func (a *Add) Hello() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "hello",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

// Class interface
type AllTypesIface interface {
    GetEnumPropertyValue() float64
    SetEnumPropertyValue(val float64)
    GetAnyArrayProperty() []__JSII__.Any
    SetAnyArrayProperty(val []__JSII__.Any)
    GetAnyMapProperty() map[string]__JSII__.Any
    SetAnyMapProperty(val map[string]__JSII__.Any)
    GetAnyProperty() __JSII__.Any
    SetAnyProperty(val __JSII__.Any)
    GetArrayProperty() []string
    SetArrayProperty(val []string)
    GetBooleanProperty() bool
    SetBooleanProperty(val bool)
    GetDateProperty() string
    SetDateProperty(val string)
    GetEnumProperty() AllTypesEnum
    SetEnumProperty(val AllTypesEnum)
    GetJsonProperty() map[string]__JSII__.Any
    SetJsonProperty(val map[string]__JSII__.Any)
    GetMapProperty() map[string]scopejsiicalclib.Number
    SetMapProperty(val map[string]scopejsiicalclib.Number)
    GetNumberProperty() float64
    SetNumberProperty(val float64)
    GetStringProperty() string
    SetStringProperty(val string)
    GetUnionArrayProperty() []__JSII__.Any
    SetUnionArrayProperty(val []__JSII__.Any)
    GetUnionMapProperty() map[string]__JSII__.Any
    SetUnionMapProperty(val map[string]__JSII__.Any)
    GetUnionProperty() __JSII__.Any
    SetUnionProperty(val __JSII__.Any)
    GetUnknownArrayProperty() []__JSII__.Any
    SetUnknownArrayProperty(val []__JSII__.Any)
    GetUnknownMapProperty() map[string]__JSII__.Any
    SetUnknownMapProperty(val map[string]__JSII__.Any)
    GetUnknownProperty() __JSII__.Any
    SetUnknownProperty(val __JSII__.Any)
    GetOptionalEnumValue() StringEnum
    SetOptionalEnumValue(val StringEnum)
    AnyIn(inp __JSII__.Any)
    AnyOut() __JSII__.Any
    EnumMethod(value StringEnum) StringEnum
}

// This class includes property for all types supported by jsii.
// 
// The setters will validate
// that the value set is of the expected type and throw otherwise.
// Struct proxy
type AllTypes struct {
    jsiiObjInstanceId string
    EnumPropertyValue float64
    AnyArrayProperty []__JSII__.Any
    AnyMapProperty map[string]__JSII__.Any
    AnyProperty __JSII__.Any
    ArrayProperty []string
    BooleanProperty bool
    DateProperty string
    EnumProperty AllTypesEnum
    JsonProperty map[string]__JSII__.Any
    MapProperty map[string]scopejsiicalclib.Number
    NumberProperty float64
    StringProperty string
    UnionArrayProperty []__JSII__.Any
    UnionMapProperty map[string]__JSII__.Any
    UnionProperty __JSII__.Any
    UnknownArrayProperty []__JSII__.Any
    UnknownMapProperty map[string]__JSII__.Any
    UnknownProperty __JSII__.Any
    OptionalEnumValue StringEnum
}

func (a *AllTypes) GetEnumPropertyValue() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "enumPropertyValue",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return a.EnumPropertyValue
}

func (a *AllTypes) GetAnyArrayProperty() []__JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "anyArrayProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return a.AnyArrayProperty
}

func (a *AllTypes) GetAnyMapProperty() map[string]__JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "anyMapProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return a.AnyMapProperty
}

func (a *AllTypes) GetAnyProperty() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "anyProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return a.AnyProperty
}

func (a *AllTypes) GetArrayProperty() []string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "arrayProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return a.ArrayProperty
}

func (a *AllTypes) GetBooleanProperty() bool {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "booleanProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return a.BooleanProperty
}

func (a *AllTypes) GetDateProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "dateProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return a.DateProperty
}

func (a *AllTypes) GetEnumProperty() AllTypesEnum {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "enumProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return a.EnumProperty
}

func (a *AllTypes) GetJsonProperty() map[string]__JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "jsonProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return a.JsonProperty
}

func (a *AllTypes) GetMapProperty() map[string]scopejsiicalclib.Number {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "mapProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return a.MapProperty
}

func (a *AllTypes) GetNumberProperty() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "numberProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return a.NumberProperty
}

func (a *AllTypes) GetStringProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "stringProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return a.StringProperty
}

func (a *AllTypes) GetUnionArrayProperty() []__JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "unionArrayProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return a.UnionArrayProperty
}

func (a *AllTypes) GetUnionMapProperty() map[string]__JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "unionMapProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return a.UnionMapProperty
}

func (a *AllTypes) GetUnionProperty() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "unionProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return a.UnionProperty
}

func (a *AllTypes) GetUnknownArrayProperty() []__JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "unknownArrayProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return a.UnknownArrayProperty
}

func (a *AllTypes) GetUnknownMapProperty() map[string]__JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "unknownMapProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return a.UnknownMapProperty
}

func (a *AllTypes) GetUnknownProperty() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "unknownProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return a.UnknownProperty
}

func (a *AllTypes) GetOptionalEnumValue() StringEnum {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "optionalEnumValue",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return a.OptionalEnumValue
}


func (obj *AllTypes) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewAllTypes() AllTypesIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.AllTypes",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := AllTypes{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (a *AllTypes) SetEnumPropertyValue(val float64) {
    a.EnumPropertyValue = val
}

func (a *AllTypes) SetAnyArrayProperty(val []__JSII__.Any) {
    a.AnyArrayProperty = val
}

func (a *AllTypes) SetAnyMapProperty(val map[string]__JSII__.Any) {
    a.AnyMapProperty = val
}

func (a *AllTypes) SetAnyProperty(val __JSII__.Any) {
    a.AnyProperty = val
}

func (a *AllTypes) SetArrayProperty(val []string) {
    a.ArrayProperty = val
}

func (a *AllTypes) SetBooleanProperty(val bool) {
    a.BooleanProperty = val
}

func (a *AllTypes) SetDateProperty(val string) {
    a.DateProperty = val
}

func (a *AllTypes) SetEnumProperty(val AllTypesEnum) {
    a.EnumProperty = val
}

func (a *AllTypes) SetJsonProperty(val map[string]__JSII__.Any) {
    a.JsonProperty = val
}

func (a *AllTypes) SetMapProperty(val map[string]scopejsiicalclib.Number) {
    a.MapProperty = val
}

func (a *AllTypes) SetNumberProperty(val float64) {
    a.NumberProperty = val
}

func (a *AllTypes) SetStringProperty(val string) {
    a.StringProperty = val
}

func (a *AllTypes) SetUnionArrayProperty(val []__JSII__.Any) {
    a.UnionArrayProperty = val
}

func (a *AllTypes) SetUnionMapProperty(val map[string]__JSII__.Any) {
    a.UnionMapProperty = val
}

func (a *AllTypes) SetUnionProperty(val __JSII__.Any) {
    a.UnionProperty = val
}

func (a *AllTypes) SetUnknownArrayProperty(val []__JSII__.Any) {
    a.UnknownArrayProperty = val
}

func (a *AllTypes) SetUnknownMapProperty(val map[string]__JSII__.Any) {
    a.UnknownMapProperty = val
}

func (a *AllTypes) SetUnknownProperty(val __JSII__.Any) {
    a.UnknownProperty = val
}

func (a *AllTypes) SetOptionalEnumValue(val StringEnum) {
    a.OptionalEnumValue = val
}

func (a *AllTypes) AnyIn(inp __JSII__.Any) {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "anyIn",
        Args: []interface{}{inp},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (a *AllTypes) AnyOut() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "anyOut",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func (a *AllTypes) EnumMethod(value StringEnum) StringEnum {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "enumMethod",
        Args: []interface{}{value},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "ENUM_DUMMY"
}

type AllTypesEnum string

const (
    AllTypesEnumMyEnumValue AllTypesEnum = "MY_ENUM_VALUE"
    AllTypesEnumYourEnumValue AllTypesEnum = "YOUR_ENUM_VALUE"
    AllTypesEnumThisIsGreat AllTypesEnum = "THIS_IS_GREAT"
)

// Class interface
type AllowedMethodNamesIface interface {
    GetBar(_p1 string, _p2 float64)
    GetFoo(withParam string) string
    SetBar(_x string, _y float64, _z bool)
    SetFoo(_x string, _y float64)
}

// Struct proxy
type AllowedMethodNames struct {
    jsiiObjInstanceId string
}

func (obj *AllowedMethodNames) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewAllowedMethodNames() AllowedMethodNamesIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.AllowedMethodNames",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := AllowedMethodNames{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (a *AllowedMethodNames) GetBar(_p1 string, _p2 float64) {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "getBar",
        Args: []interface{}{_p1, _p2},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (a *AllowedMethodNames) GetFoo(withParam string) string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "getFoo",
        Args: []interface{}{withParam},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

func (a *AllowedMethodNames) SetBar(_x string, _y float64, _z bool) {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "setBar",
        Args: []interface{}{_x, _y, _z},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (a *AllowedMethodNames) SetFoo(_x string, _y float64) {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "setFoo",
        Args: []interface{}{_x, _y},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

// Class interface
type AmbiguousParametersIface interface {
    GetProps() StructParameterType
    SetProps(val StructParameterType)
    GetScope() Bell
    SetScope(val Bell)
}

// Struct proxy
type AmbiguousParameters struct {
    jsiiObjInstanceId string
    Props StructParameterType
    Scope Bell
}

func (a *AmbiguousParameters) GetProps() StructParameterType {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "props",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return a.Props
}

func (a *AmbiguousParameters) GetScope() Bell {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "scope",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return a.Scope
}


func (obj *AmbiguousParameters) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewAmbiguousParameters(scope Bell, props StructParameterType) AmbiguousParametersIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.AmbiguousParameters",
        Interfaces: []string{},
        Args: []interface{}{scope, props},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := AmbiguousParameters{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (a *AmbiguousParameters) SetProps(val StructParameterType) {
    a.Props = val
}

func (a *AmbiguousParameters) SetScope(val Bell) {
    a.Scope = val
}

// Class interface
type AnonymousImplementationProviderIface interface {
    IAnonymousImplementationProvider
    ProvideAsClass() Implementation
    ProvideAsInterface() IAnonymouslyImplementMe
}

// Struct proxy
type AnonymousImplementationProvider struct {
    jsiiObjInstanceId string
}

func (obj *AnonymousImplementationProvider) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewAnonymousImplementationProvider() AnonymousImplementationProviderIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.AnonymousImplementationProvider",
        Interfaces: []string{"jsii-calc.IAnonymousImplementationProvider"},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := AnonymousImplementationProvider{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (a *AnonymousImplementationProvider) ProvideAsClass() Implementation {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "provideAsClass",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return Implementation{}
}

func (a *AnonymousImplementationProvider) ProvideAsInterface() IAnonymouslyImplementMe {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "provideAsInterface",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return nil
}

// Class interface
type AsyncVirtualMethodsIface interface {
    CallMe() float64
    CallMe2() float64
    CallMeDoublePromise() float64
    DontOverrideMe() float64
    OverrideMe(mult float64) float64
    OverrideMeToo() float64
}

// Struct proxy
type AsyncVirtualMethods struct {
    jsiiObjInstanceId string
}

func (obj *AsyncVirtualMethods) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewAsyncVirtualMethods() AsyncVirtualMethodsIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.AsyncVirtualMethods",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := AsyncVirtualMethods{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (a *AsyncVirtualMethods) CallMe() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "callMe",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return 0.0
}

func (a *AsyncVirtualMethods) CallMe2() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "callMe2",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return 0.0
}

func (a *AsyncVirtualMethods) CallMeDoublePromise() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "callMeDoublePromise",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return 0.0
}

func (a *AsyncVirtualMethods) DontOverrideMe() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "dontOverrideMe",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return 0.0
}

func (a *AsyncVirtualMethods) OverrideMe(mult float64) float64 {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "overrideMe",
        Args: []interface{}{mult},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return 0.0
}

func (a *AsyncVirtualMethods) OverrideMeToo() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "overrideMeToo",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return 0.0
}

// Class interface
type AugmentableClassIface interface {
    MethodOne()
    MethodTwo()
}

// Struct proxy
type AugmentableClass struct {
    jsiiObjInstanceId string
}

func (obj *AugmentableClass) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewAugmentableClass() AugmentableClassIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.AugmentableClass",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := AugmentableClass{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (a *AugmentableClass) MethodOne() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "methodOne",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (a *AugmentableClass) MethodTwo() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "methodTwo",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: a.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

// Class interface
type BaseJsii976Iface interface {
}

// Struct proxy
type BaseJsii976 struct {
    jsiiObjInstanceId string
}

func (obj *BaseJsii976) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewBaseJsii976() BaseJsii976Iface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.BaseJsii976",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := BaseJsii976{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

// Class interface
type BellIface interface {
    IBell
    GetRung() bool
    SetRung(val bool)
    Ring()
}

// Struct proxy
type Bell struct {
    jsiiObjInstanceId string
    Rung bool
}

func (b *Bell) GetRung() bool {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "rung",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: b.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return b.Rung
}


func (obj *Bell) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewBell() BellIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.Bell",
        Interfaces: []string{"jsii-calc.IBell"},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := Bell{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (b *Bell) SetRung(val bool) {
    b.Rung = val
}

func (b *Bell) Ring() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "ring",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: b.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

// Class interface
type BinaryOperationIface interface {
    scopejsiicalclib.IFriendly
    GetValue() float64
    SetValue(val float64)
    GetLhs() scopejsiicalclib.NumericValue
    SetLhs(val scopejsiicalclib.NumericValue)
    GetRhs() scopejsiicalclib.NumericValue
    SetRhs(val scopejsiicalclib.NumericValue)
    TypeName() __JSII__.Any
    ToString() string
    Hello() string
}

// Represents an operation with two operands.
// Struct proxy
type BinaryOperation struct {
    jsiiObjInstanceId string
    // The value.
    // Deprecated.
    Value float64
    // Left-hand side operand.
    Lhs scopejsiicalclib.NumericValue
    // Right-hand side operand.
    Rhs scopejsiicalclib.NumericValue
}

func (b *BinaryOperation) GetValue() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "value",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: b.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return b.Value
}

func (b *BinaryOperation) GetLhs() scopejsiicalclib.NumericValue {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "lhs",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: b.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return b.Lhs
}

func (b *BinaryOperation) GetRhs() scopejsiicalclib.NumericValue {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "rhs",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: b.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return b.Rhs
}


func (obj *BinaryOperation) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Creates a BinaryOperation.
func NewBinaryOperation(lhs scopejsiicalclib.NumericValue, rhs scopejsiicalclib.NumericValue) BinaryOperationIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.BinaryOperation",
        Interfaces: []string{"@scope/jsii-calc-lib.IFriendly"},
        Args: []interface{}{lhs, rhs},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := BinaryOperation{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (b *BinaryOperation) SetValue(val float64) {
    b.Value = val
}

func (b *BinaryOperation) SetLhs(val scopejsiicalclib.NumericValue) {
    b.Lhs = val
}

func (b *BinaryOperation) SetRhs(val scopejsiicalclib.NumericValue) {
    b.Rhs = val
}

func (b *BinaryOperation) TypeName() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "typeName",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: b.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func (b *BinaryOperation) ToString() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "toString",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: b.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

func (b *BinaryOperation) Hello() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "hello",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: b.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

// Class interface
type BurriedAnonymousObjectIface interface {
    Check() bool
    GiveItBack(value __JSII__.Any) __JSII__.Any
}

// See https://github.com/aws/aws-cdk/issues/7977.
// Struct proxy
type BurriedAnonymousObject struct {
    jsiiObjInstanceId string
}

func (obj *BurriedAnonymousObject) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewBurriedAnonymousObject() BurriedAnonymousObjectIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.BurriedAnonymousObject",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := BurriedAnonymousObject{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (b *BurriedAnonymousObject) Check() bool {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "check",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: b.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return true
}

func (b *BurriedAnonymousObject) GiveItBack(value __JSII__.Any) __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "giveItBack",
        Args: []interface{}{value},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: b.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return nil
}

// Class interface
type CalculatorIface interface {
    GetValue() float64
    SetValue(val float64)
    GetExpression() scopejsiicalclib.NumericValue
    SetExpression(val scopejsiicalclib.NumericValue)
    GetDecorationPostfixes() []string
    SetDecorationPostfixes(val []string)
    GetDecorationPrefixes() []string
    SetDecorationPrefixes(val []string)
    GetStringStyle() composition.CompositionStringStyle
    SetStringStyle(val composition.CompositionStringStyle)
    GetOperationsLog() []scopejsiicalclib.NumericValue
    SetOperationsLog(val []scopejsiicalclib.NumericValue)
    GetOperationsMap() map[string][]scopejsiicalclib.NumericValue
    SetOperationsMap(val map[string][]scopejsiicalclib.NumericValue)
    GetCurr() scopejsiicalclib.NumericValue
    SetCurr(val scopejsiicalclib.NumericValue)
    GetMaxValue() float64
    SetMaxValue(val float64)
    GetUnionProperty() __JSII__.Any
    SetUnionProperty(val __JSII__.Any)
    TypeName() __JSII__.Any
    ToString() string
    Add(value float64)
    Mul(value float64)
    Neg()
    Pow(value float64)
    ReadUnionValue() float64
}

// A calculator which maintains a current value and allows adding operations.
// 
// Here's how you use it:
// 
// \`\`\`ts
// const calculator = new calc.Calculator();
// calculator.add(5);
// calculator.mul(3);
// console.log(calculator.expression.value);
// \`\`\`
// 
// I will repeat this example again, but in an @example tag.
//
// TODO: EXAMPLE
//
// Struct proxy
type Calculator struct {
    jsiiObjInstanceId string
    // (deprecated) The value.
    Value float64
    // Returns the expression.
    Expression scopejsiicalclib.NumericValue
    // A set of postfixes to include in a decorated .toString().
    DecorationPostfixes []string
    // A set of prefixes to include in a decorated .toString().
    DecorationPrefixes []string
    // The .toString() style.
    StringStyle composition.CompositionStringStyle
    // A log of all operations.
    OperationsLog []scopejsiicalclib.NumericValue
    // A map of per operation name of all operations performed.
    OperationsMap map[string][]scopejsiicalclib.NumericValue
    // The current value.
    Curr scopejsiicalclib.NumericValue
    // The maximum value allows in this calculator.
    MaxValue float64
    // Example of a property that accepts a union of types.
    UnionProperty __JSII__.Any
}

func (c *Calculator) GetValue() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "value",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.Value
}

func (c *Calculator) GetExpression() scopejsiicalclib.NumericValue {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "expression",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.Expression
}

func (c *Calculator) GetDecorationPostfixes() []string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "decorationPostfixes",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.DecorationPostfixes
}

func (c *Calculator) GetDecorationPrefixes() []string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "decorationPrefixes",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.DecorationPrefixes
}

func (c *Calculator) GetStringStyle() composition.CompositionStringStyle {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "stringStyle",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.StringStyle
}

func (c *Calculator) GetOperationsLog() []scopejsiicalclib.NumericValue {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "operationsLog",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.OperationsLog
}

func (c *Calculator) GetOperationsMap() map[string][]scopejsiicalclib.NumericValue {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "operationsMap",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.OperationsMap
}

func (c *Calculator) GetCurr() scopejsiicalclib.NumericValue {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "curr",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.Curr
}

func (c *Calculator) GetMaxValue() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "maxValue",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.MaxValue
}

func (c *Calculator) GetUnionProperty() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "unionProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.UnionProperty
}


func (obj *Calculator) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Creates a Calculator object.
func NewCalculator(props CalculatorProps) CalculatorIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.Calculator",
        Interfaces: []string{},
        Args: []interface{}{props},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := Calculator{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (c *Calculator) SetValue(val float64) {
    c.Value = val
}

func (c *Calculator) SetExpression(val scopejsiicalclib.NumericValue) {
    c.Expression = val
}

func (c *Calculator) SetDecorationPostfixes(val []string) {
    c.DecorationPostfixes = val
}

func (c *Calculator) SetDecorationPrefixes(val []string) {
    c.DecorationPrefixes = val
}

func (c *Calculator) SetStringStyle(val composition.CompositionStringStyle) {
    c.StringStyle = val
}

func (c *Calculator) SetOperationsLog(val []scopejsiicalclib.NumericValue) {
    c.OperationsLog = val
}

func (c *Calculator) SetOperationsMap(val map[string][]scopejsiicalclib.NumericValue) {
    c.OperationsMap = val
}

func (c *Calculator) SetCurr(val scopejsiicalclib.NumericValue) {
    c.Curr = val
}

func (c *Calculator) SetMaxValue(val float64) {
    c.MaxValue = val
}

func (c *Calculator) SetUnionProperty(val __JSII__.Any) {
    c.UnionProperty = val
}

func (c *Calculator) TypeName() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "typeName",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func (c *Calculator) ToString() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "toString",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

func (c *Calculator) Add(value float64) {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "add",
        Args: []interface{}{value},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (c *Calculator) Mul(value float64) {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "mul",
        Args: []interface{}{value},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (c *Calculator) Neg() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "neg",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (c *Calculator) Pow(value float64) {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "pow",
        Args: []interface{}{value},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (c *Calculator) ReadUnionValue() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "readUnionValue",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return 0.0
}

// CalculatorPropsIface is the public interface for the custom type CalculatorProps
type CalculatorPropsIface interface {
    GetInitialValue() float64
    GetMaximumValue() float64
}

// Properties for Calculator.
// Struct proxy
type CalculatorProps struct {
    jsiiObjInstanceId string
    // The initial value of the calculator.
    // 
    // NOTE: Any number works here, it's fine.
    InitialValue float64
    // The maximum value the calculator can store.
    MaximumValue float64
}

func (c *CalculatorProps) GetInitialValue() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "initialValue",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.InitialValue
}

func (c *CalculatorProps) GetMaximumValue() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "maximumValue",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.MaximumValue
}


func (obj *CalculatorProps) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// ChildStruct982Iface is the public interface for the custom type ChildStruct982
type ChildStruct982Iface interface {
    GetFoo() string
    GetBar() float64
}

// Struct proxy
type ChildStruct982 struct {
    jsiiObjInstanceId string
    Foo string
    Bar float64
}

func (c *ChildStruct982) GetFoo() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "foo",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.Foo
}

func (c *ChildStruct982) GetBar() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "bar",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.Bar
}


func (obj *ChildStruct982) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Class interface
type ClassThatImplementsTheInternalInterfaceIface interface {
    INonInternalInterface
    IAnotherPublicInterface
    GetA() string
    SetA(val string)
    GetB() string
    SetB(val string)
    GetC() string
    SetC(val string)
    GetD() string
    SetD(val string)
}

// Struct proxy
type ClassThatImplementsTheInternalInterface struct {
    jsiiObjInstanceId string
    A string
    B string
    C string
    D string
}

func (c *ClassThatImplementsTheInternalInterface) GetA() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "a",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.A
}

func (c *ClassThatImplementsTheInternalInterface) GetB() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "b",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.B
}

func (c *ClassThatImplementsTheInternalInterface) GetC() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "c",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.C
}

func (c *ClassThatImplementsTheInternalInterface) GetD() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "d",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.D
}


func (obj *ClassThatImplementsTheInternalInterface) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewClassThatImplementsTheInternalInterface() ClassThatImplementsTheInternalInterfaceIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.ClassThatImplementsTheInternalInterface",
        Interfaces: []string{"jsii-calc.INonInternalInterface"},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := ClassThatImplementsTheInternalInterface{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (c *ClassThatImplementsTheInternalInterface) SetA(val string) {
    c.A = val
}

func (c *ClassThatImplementsTheInternalInterface) SetB(val string) {
    c.B = val
}

func (c *ClassThatImplementsTheInternalInterface) SetC(val string) {
    c.C = val
}

func (c *ClassThatImplementsTheInternalInterface) SetD(val string) {
    c.D = val
}

// Class interface
type ClassThatImplementsThePrivateInterfaceIface interface {
    INonInternalInterface
    IAnotherPublicInterface
    GetA() string
    SetA(val string)
    GetB() string
    SetB(val string)
    GetC() string
    SetC(val string)
    GetE() string
    SetE(val string)
}

// Struct proxy
type ClassThatImplementsThePrivateInterface struct {
    jsiiObjInstanceId string
    A string
    B string
    C string
    E string
}

func (c *ClassThatImplementsThePrivateInterface) GetA() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "a",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.A
}

func (c *ClassThatImplementsThePrivateInterface) GetB() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "b",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.B
}

func (c *ClassThatImplementsThePrivateInterface) GetC() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "c",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.C
}

func (c *ClassThatImplementsThePrivateInterface) GetE() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "e",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.E
}


func (obj *ClassThatImplementsThePrivateInterface) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewClassThatImplementsThePrivateInterface() ClassThatImplementsThePrivateInterfaceIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.ClassThatImplementsThePrivateInterface",
        Interfaces: []string{"jsii-calc.INonInternalInterface"},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := ClassThatImplementsThePrivateInterface{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (c *ClassThatImplementsThePrivateInterface) SetA(val string) {
    c.A = val
}

func (c *ClassThatImplementsThePrivateInterface) SetB(val string) {
    c.B = val
}

func (c *ClassThatImplementsThePrivateInterface) SetC(val string) {
    c.C = val
}

func (c *ClassThatImplementsThePrivateInterface) SetE(val string) {
    c.E = val
}

// Class interface
type ClassWithCollectionsIface interface {
    GetStaticArray() []string
    SetStaticArray(val []string)
    GetStaticMap() map[string]string
    SetStaticMap(val map[string]string)
    GetArray() []string
    SetArray(val []string)
    GetMap() map[string]string
    SetMap(val map[string]string)
}

// Struct proxy
type ClassWithCollections struct {
    jsiiObjInstanceId string
    StaticArray []string
    StaticMap map[string]string
    Array []string
    Map map[string]string
}

func (c *ClassWithCollections) GetStaticArray() []string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "staticArray",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.StaticArray
}

func (c *ClassWithCollections) GetStaticMap() map[string]string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "staticMap",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.StaticMap
}

func (c *ClassWithCollections) GetArray() []string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "array",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.Array
}

func (c *ClassWithCollections) GetMap() map[string]string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "map",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.Map
}


func (obj *ClassWithCollections) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewClassWithCollections(map_ map[string]string, array []string) ClassWithCollectionsIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.ClassWithCollections",
        Interfaces: []string{},
        Args: []interface{}{map_, array},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := ClassWithCollections{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (c *ClassWithCollections) SetStaticArray(val []string) {
    c.StaticArray = val
}

func (c *ClassWithCollections) SetStaticMap(val map[string]string) {
    c.StaticMap = val
}

func (c *ClassWithCollections) SetArray(val []string) {
    c.Array = val
}

func (c *ClassWithCollections) SetMap(val map[string]string) {
    c.Map = val
}

func ClassWithCollections_CreateAList() []string {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.ClassWithCollections",
        Method: "createAList",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func ClassWithCollections_CreateAMap() map[string]string {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.ClassWithCollections",
        Method: "createAMap",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

// Class interface
type ClassWithDocsIface interface {
}

// This class has docs.
// 
// The docs are great. They're a bunch of tags.
//
// TODO: EXAMPLE
//
// See: https://aws.amazon.com/
//
// Struct proxy
type ClassWithDocs struct {
    jsiiObjInstanceId string
}

func (obj *ClassWithDocs) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewClassWithDocs() ClassWithDocsIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.ClassWithDocs",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := ClassWithDocs{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

// Class interface
type ClassWithJavaReservedWordsIface interface {
    GetInt() string
    SetInt(val string)
    Import(assert string) string
}

// Struct proxy
type ClassWithJavaReservedWords struct {
    jsiiObjInstanceId string
    Int string
}

func (c *ClassWithJavaReservedWords) GetInt() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "int",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.Int
}


func (obj *ClassWithJavaReservedWords) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewClassWithJavaReservedWords(int string) ClassWithJavaReservedWordsIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.ClassWithJavaReservedWords",
        Interfaces: []string{},
        Args: []interface{}{int},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := ClassWithJavaReservedWords{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (c *ClassWithJavaReservedWords) SetInt(val string) {
    c.Int = val
}

func (c *ClassWithJavaReservedWords) Import(assert string) string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "import",
        Args: []interface{}{assert},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

// Class interface
type ClassWithMutableObjectLiteralPropertyIface interface {
    GetMutableObject() IMutableObjectLiteral
    SetMutableObject(val IMutableObjectLiteral)
}

// Struct proxy
type ClassWithMutableObjectLiteralProperty struct {
    jsiiObjInstanceId string
    MutableObject IMutableObjectLiteral
}

func (c *ClassWithMutableObjectLiteralProperty) GetMutableObject() IMutableObjectLiteral {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "mutableObject",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.MutableObject
}


func (obj *ClassWithMutableObjectLiteralProperty) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewClassWithMutableObjectLiteralProperty() ClassWithMutableObjectLiteralPropertyIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.ClassWithMutableObjectLiteralProperty",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := ClassWithMutableObjectLiteralProperty{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (c *ClassWithMutableObjectLiteralProperty) SetMutableObject(val IMutableObjectLiteral) {
    c.MutableObject = val
}

// Class interface
type ClassWithPrivateConstructorAndAutomaticPropertiesIface interface {
    IInterfaceWithProperties
    GetReadOnlyString() string
    SetReadOnlyString(val string)
    GetReadWriteString() string
    SetReadWriteString(val string)
}

// Class that implements interface properties automatically, but using a private constructor.
// Struct proxy
type ClassWithPrivateConstructorAndAutomaticProperties struct {
    jsiiObjInstanceId string
    ReadOnlyString string
    ReadWriteString string
}

func (c *ClassWithPrivateConstructorAndAutomaticProperties) GetReadOnlyString() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "readOnlyString",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.ReadOnlyString
}

func (c *ClassWithPrivateConstructorAndAutomaticProperties) GetReadWriteString() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "readWriteString",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.ReadWriteString
}


func (obj *ClassWithPrivateConstructorAndAutomaticProperties) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func (c *ClassWithPrivateConstructorAndAutomaticProperties) SetReadOnlyString(val string) {
    c.ReadOnlyString = val
}

func (c *ClassWithPrivateConstructorAndAutomaticProperties) SetReadWriteString(val string) {
    c.ReadWriteString = val
}

func ClassWithPrivateConstructorAndAutomaticProperties_Create(readOnlyString string, readWriteString string) ClassWithPrivateConstructorAndAutomaticProperties {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.ClassWithPrivateConstructorAndAutomaticProperties",
        Method: "create",
        Args: []interface{}{readOnlyString, readWriteString},
    })
    if err != nil {
        panic(err)
    }
    return ClassWithPrivateConstructorAndAutomaticProperties{}
}

// Class interface
type ConfusingToJacksonIface interface {
    GetUnionProperty() __JSII__.Any
    SetUnionProperty(val __JSII__.Any)
}

// This tries to confuse Jackson by having overloaded property setters.
// See: https://github.com/aws/aws-cdk/issues/4080
//
// Struct proxy
type ConfusingToJackson struct {
    jsiiObjInstanceId string
    UnionProperty __JSII__.Any
}

func (c *ConfusingToJackson) GetUnionProperty() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "unionProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.UnionProperty
}


func (obj *ConfusingToJackson) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func (c *ConfusingToJackson) SetUnionProperty(val __JSII__.Any) {
    c.UnionProperty = val
}

func ConfusingToJackson_MakeInstance() ConfusingToJackson {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.ConfusingToJackson",
        Method: "makeInstance",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return ConfusingToJackson{}
}

func ConfusingToJackson_MakeStructInstance() ConfusingToJacksonStruct {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.ConfusingToJackson",
        Method: "makeStructInstance",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return ConfusingToJacksonStruct{}
}

// ConfusingToJacksonStructIface is the public interface for the custom type ConfusingToJacksonStruct
type ConfusingToJacksonStructIface interface {
    GetUnionProperty() __JSII__.Any
}

// Struct proxy
type ConfusingToJacksonStruct struct {
    jsiiObjInstanceId string
    UnionProperty __JSII__.Any
}

func (c *ConfusingToJacksonStruct) GetUnionProperty() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "unionProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.UnionProperty
}


func (obj *ConfusingToJacksonStruct) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Class interface
type ConstructorPassesThisOutIface interface {
}

// Struct proxy
type ConstructorPassesThisOut struct {
    jsiiObjInstanceId string
}

func (obj *ConstructorPassesThisOut) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewConstructorPassesThisOut(consumer PartiallyInitializedThisConsumer) ConstructorPassesThisOutIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.ConstructorPassesThisOut",
        Interfaces: []string{},
        Args: []interface{}{consumer},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := ConstructorPassesThisOut{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

// Class interface
type ConstructorsIface interface {
}

// Struct proxy
type Constructors struct {
    jsiiObjInstanceId string
}

func (obj *Constructors) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewConstructors() ConstructorsIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.Constructors",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := Constructors{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func Constructors_HiddenInterface() IPublicInterface {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.Constructors",
        Method: "hiddenInterface",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func Constructors_HiddenInterfaces() []IPublicInterface {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.Constructors",
        Method: "hiddenInterfaces",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func Constructors_HiddenSubInterfaces() []IPublicInterface {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.Constructors",
        Method: "hiddenSubInterfaces",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func Constructors_MakeClass() PublicClass {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.Constructors",
        Method: "makeClass",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return PublicClass{}
}

func Constructors_MakeInterface() IPublicInterface {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.Constructors",
        Method: "makeInterface",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func Constructors_MakeInterface2() IPublicInterface2 {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.Constructors",
        Method: "makeInterface2",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func Constructors_MakeInterfaces() []IPublicInterface {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.Constructors",
        Method: "makeInterfaces",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

// Class interface
type ConsumePureInterfaceIface interface {
    WorkItBaby() StructB
}

// Struct proxy
type ConsumePureInterface struct {
    jsiiObjInstanceId string
}

func (obj *ConsumePureInterface) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewConsumePureInterface(delegate IStructReturningDelegate) ConsumePureInterfaceIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.ConsumePureInterface",
        Interfaces: []string{},
        Args: []interface{}{delegate},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := ConsumePureInterface{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (c *ConsumePureInterface) WorkItBaby() StructB {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "workItBaby",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return StructB{}
}

// Class interface
type ConsumerCanRingBellIface interface {
    ImplementedByObjectLiteral(ringer IBellRinger) bool
    ImplementedByPrivateClass(ringer IBellRinger) bool
    ImplementedByPublicClass(ringer IBellRinger) bool
    WhenTypedAsClass(ringer IConcreteBellRinger) bool
}

// Test calling back to consumers that implement interfaces.
// 
// Check that if a JSII consumer implements IConsumerWithInterfaceParam, they can call
// the method on the argument that they're passed...
// Struct proxy
type ConsumerCanRingBell struct {
    jsiiObjInstanceId string
}

func (obj *ConsumerCanRingBell) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewConsumerCanRingBell() ConsumerCanRingBellIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.ConsumerCanRingBell",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := ConsumerCanRingBell{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func ConsumerCanRingBell_StaticImplementedByObjectLiteral(ringer IBellRinger) bool {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.ConsumerCanRingBell",
        Method: "staticImplementedByObjectLiteral",
        Args: []interface{}{ringer},
    })
    if err != nil {
        panic(err)
    }
    return true
}

func ConsumerCanRingBell_StaticImplementedByPrivateClass(ringer IBellRinger) bool {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.ConsumerCanRingBell",
        Method: "staticImplementedByPrivateClass",
        Args: []interface{}{ringer},
    })
    if err != nil {
        panic(err)
    }
    return true
}

func ConsumerCanRingBell_StaticImplementedByPublicClass(ringer IBellRinger) bool {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.ConsumerCanRingBell",
        Method: "staticImplementedByPublicClass",
        Args: []interface{}{ringer},
    })
    if err != nil {
        panic(err)
    }
    return true
}

func ConsumerCanRingBell_StaticWhenTypedAsClass(ringer IConcreteBellRinger) bool {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.ConsumerCanRingBell",
        Method: "staticWhenTypedAsClass",
        Args: []interface{}{ringer},
    })
    if err != nil {
        panic(err)
    }
    return true
}

func (c *ConsumerCanRingBell) ImplementedByObjectLiteral(ringer IBellRinger) bool {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "implementedByObjectLiteral",
        Args: []interface{}{ringer},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return true
}

func (c *ConsumerCanRingBell) ImplementedByPrivateClass(ringer IBellRinger) bool {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "implementedByPrivateClass",
        Args: []interface{}{ringer},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return true
}

func (c *ConsumerCanRingBell) ImplementedByPublicClass(ringer IBellRinger) bool {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "implementedByPublicClass",
        Args: []interface{}{ringer},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return true
}

func (c *ConsumerCanRingBell) WhenTypedAsClass(ringer IConcreteBellRinger) bool {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "whenTypedAsClass",
        Args: []interface{}{ringer},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return true
}

// Class interface
type ConsumersOfThisCrazyTypeSystemIface interface {
    ConsumeAnotherPublicInterface(obj IAnotherPublicInterface) string
    ConsumeNonInternalInterface(obj INonInternalInterface) __JSII__.Any
}

// Struct proxy
type ConsumersOfThisCrazyTypeSystem struct {
    jsiiObjInstanceId string
}

func (obj *ConsumersOfThisCrazyTypeSystem) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewConsumersOfThisCrazyTypeSystem() ConsumersOfThisCrazyTypeSystemIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.ConsumersOfThisCrazyTypeSystem",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := ConsumersOfThisCrazyTypeSystem{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (c *ConsumersOfThisCrazyTypeSystem) ConsumeAnotherPublicInterface(obj IAnotherPublicInterface) string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "consumeAnotherPublicInterface",
        Args: []interface{}{obj},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

func (c *ConsumersOfThisCrazyTypeSystem) ConsumeNonInternalInterface(obj INonInternalInterface) __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "consumeNonInternalInterface",
        Args: []interface{}{obj},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return nil
}

// Class interface
type DataRendererIface interface {
    Render(data scopejsiicalclib.MyFirstStruct) string
    RenderArbitrary(data map[string]__JSII__.Any) string
    RenderMap(map_ map[string]__JSII__.Any) string
}

// Verifies proper type handling through dynamic overrides.
// Struct proxy
type DataRenderer struct {
    jsiiObjInstanceId string
}

func (obj *DataRenderer) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewDataRenderer() DataRendererIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.DataRenderer",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := DataRenderer{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (d *DataRenderer) Render(data scopejsiicalclib.MyFirstStruct) string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "render",
        Args: []interface{}{data},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

func (d *DataRenderer) RenderArbitrary(data map[string]__JSII__.Any) string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "renderArbitrary",
        Args: []interface{}{data},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

func (d *DataRenderer) RenderMap(map_ map[string]__JSII__.Any) string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "renderMap",
        Args: []interface{}{map_},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

// Class interface
type DefaultedConstructorArgumentIface interface {
    GetArg1() float64
    SetArg1(val float64)
    GetArg3() string
    SetArg3(val string)
    GetArg2() string
    SetArg2(val string)
}

// Struct proxy
type DefaultedConstructorArgument struct {
    jsiiObjInstanceId string
    Arg1 float64
    Arg3 string
    Arg2 string
}

func (d *DefaultedConstructorArgument) GetArg1() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "arg1",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.Arg1
}

func (d *DefaultedConstructorArgument) GetArg3() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "arg3",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.Arg3
}

func (d *DefaultedConstructorArgument) GetArg2() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "arg2",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.Arg2
}


func (obj *DefaultedConstructorArgument) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewDefaultedConstructorArgument(arg1 float64, arg2 string, arg3 string) DefaultedConstructorArgumentIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.DefaultedConstructorArgument",
        Interfaces: []string{},
        Args: []interface{}{arg1, arg2, arg3},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := DefaultedConstructorArgument{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (d *DefaultedConstructorArgument) SetArg1(val float64) {
    d.Arg1 = val
}

func (d *DefaultedConstructorArgument) SetArg3(val string) {
    d.Arg3 = val
}

func (d *DefaultedConstructorArgument) SetArg2(val string) {
    d.Arg2 = val
}

// Class interface
type Demonstrate982Iface interface {
}

// 1.
// 
// call #takeThis() -> An ObjectRef will be provisioned for the value (it'll be re-used!)
// 2. call #takeThisToo() -> The ObjectRef from before will need to be down-cased to the ParentStruct982 type
// Struct proxy
type Demonstrate982 struct {
    jsiiObjInstanceId string
}

func (obj *Demonstrate982) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewDemonstrate982() Demonstrate982Iface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.Demonstrate982",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := Demonstrate982{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func Demonstrate982_TakeThis() ChildStruct982 {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.Demonstrate982",
        Method: "takeThis",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return ChildStruct982{}
}

func Demonstrate982_TakeThisToo() ParentStruct982 {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.Demonstrate982",
        Method: "takeThisToo",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return ParentStruct982{}
}

// Class interface
type DeprecatedClassIface interface {
    GetReadonlyProperty() string
    SetReadonlyProperty(val string)
    GetMutableProperty() float64
    SetMutableProperty(val float64)
    Method()
}

// Deprecated: a pretty boring class
// Struct proxy
type DeprecatedClass struct {
    jsiiObjInstanceId string
    // Deprecated: this is not always "wazoo", be ready to be disappointed
    ReadonlyProperty string
    // Deprecated: shouldn't have been mutable
    MutableProperty float64
}

func (d *DeprecatedClass) GetReadonlyProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "readonlyProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.ReadonlyProperty
}

func (d *DeprecatedClass) GetMutableProperty() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "mutableProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.MutableProperty
}


func (obj *DeprecatedClass) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewDeprecatedClass(readonlyString string, mutableNumber float64) DeprecatedClassIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.DeprecatedClass",
        Interfaces: []string{},
        Args: []interface{}{readonlyString, mutableNumber},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := DeprecatedClass{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (d *DeprecatedClass) SetReadonlyProperty(val string) {
    d.ReadonlyProperty = val
}

func (d *DeprecatedClass) SetMutableProperty(val float64) {
    d.MutableProperty = val
}

func (d *DeprecatedClass) Method() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "method",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

// Deprecated: your deprecated selection of bad options
type DeprecatedEnum string

const (
    DeprecatedEnumOptionA DeprecatedEnum = "OPTION_A"
    DeprecatedEnumOptionB DeprecatedEnum = "OPTION_B"
)

// DeprecatedStructIface is the public interface for the custom type DeprecatedStruct
// Deprecated: it just wraps a string
type DeprecatedStructIface interface {
    GetReadonlyProperty() string
}

// Deprecated: it just wraps a string
// Struct proxy
type DeprecatedStruct struct {
    jsiiObjInstanceId string
    // Deprecated: well, yeah
    ReadonlyProperty string
}

func (d *DeprecatedStruct) GetReadonlyProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "readonlyProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.ReadonlyProperty
}


func (obj *DeprecatedStruct) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// DerivedStructIface is the public interface for the custom type DerivedStruct
type DerivedStructIface interface {
    GetAnumber() float64
    GetAstring() string
    GetFirstOptional() []string
    GetAnotherRequired() string
    GetBool() bool
    GetNonPrimitive() DoubleTrouble
    GetAnotherOptional() map[string]scopejsiicalclib.NumericValue
    GetOptionalAny() __JSII__.Any
    GetOptionalArray() []string
}

// A struct which derives from another struct.
// Struct proxy
type DerivedStruct struct {
    jsiiObjInstanceId string
    // An awesome number value.
    // Deprecated.
    Anumber float64
    // A string value.
    // Deprecated.
    Astring string
    // Deprecated.
    FirstOptional []string
    AnotherRequired string
    Bool bool
    // An example of a non primitive property.
    NonPrimitive DoubleTrouble
    // This is optional.
    AnotherOptional map[string]scopejsiicalclib.NumericValue
    OptionalAny __JSII__.Any
    OptionalArray []string
}

func (d *DerivedStruct) GetAnumber() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "anumber",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.Anumber
}

func (d *DerivedStruct) GetAstring() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "astring",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.Astring
}

func (d *DerivedStruct) GetFirstOptional() []string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "firstOptional",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.FirstOptional
}

func (d *DerivedStruct) GetAnotherRequired() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "anotherRequired",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.AnotherRequired
}

func (d *DerivedStruct) GetBool() bool {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "bool",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.Bool
}

func (d *DerivedStruct) GetNonPrimitive() DoubleTrouble {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "nonPrimitive",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.NonPrimitive
}

func (d *DerivedStruct) GetAnotherOptional() map[string]scopejsiicalclib.NumericValue {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "anotherOptional",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.AnotherOptional
}

func (d *DerivedStruct) GetOptionalAny() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "optionalAny",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.OptionalAny
}

func (d *DerivedStruct) GetOptionalArray() []string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "optionalArray",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.OptionalArray
}


func (obj *DerivedStruct) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// DiamondInheritanceBaseLevelStructIface is the public interface for the custom type DiamondInheritanceBaseLevelStruct
type DiamondInheritanceBaseLevelStructIface interface {
    GetBaseLevelProperty() string
}

// Struct proxy
type DiamondInheritanceBaseLevelStruct struct {
    jsiiObjInstanceId string
    BaseLevelProperty string
}

func (d *DiamondInheritanceBaseLevelStruct) GetBaseLevelProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "baseLevelProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.BaseLevelProperty
}


func (obj *DiamondInheritanceBaseLevelStruct) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// DiamondInheritanceFirstMidLevelStructIface is the public interface for the custom type DiamondInheritanceFirstMidLevelStruct
type DiamondInheritanceFirstMidLevelStructIface interface {
    GetBaseLevelProperty() string
    GetFirstMidLevelProperty() string
}

// Struct proxy
type DiamondInheritanceFirstMidLevelStruct struct {
    jsiiObjInstanceId string
    BaseLevelProperty string
    FirstMidLevelProperty string
}

func (d *DiamondInheritanceFirstMidLevelStruct) GetBaseLevelProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "baseLevelProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.BaseLevelProperty
}

func (d *DiamondInheritanceFirstMidLevelStruct) GetFirstMidLevelProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "firstMidLevelProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.FirstMidLevelProperty
}


func (obj *DiamondInheritanceFirstMidLevelStruct) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// DiamondInheritanceSecondMidLevelStructIface is the public interface for the custom type DiamondInheritanceSecondMidLevelStruct
type DiamondInheritanceSecondMidLevelStructIface interface {
    GetBaseLevelProperty() string
    GetSecondMidLevelProperty() string
}

// Struct proxy
type DiamondInheritanceSecondMidLevelStruct struct {
    jsiiObjInstanceId string
    BaseLevelProperty string
    SecondMidLevelProperty string
}

func (d *DiamondInheritanceSecondMidLevelStruct) GetBaseLevelProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "baseLevelProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.BaseLevelProperty
}

func (d *DiamondInheritanceSecondMidLevelStruct) GetSecondMidLevelProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "secondMidLevelProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.SecondMidLevelProperty
}


func (obj *DiamondInheritanceSecondMidLevelStruct) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// DiamondInheritanceTopLevelStructIface is the public interface for the custom type DiamondInheritanceTopLevelStruct
type DiamondInheritanceTopLevelStructIface interface {
    GetBaseLevelProperty() string
    GetFirstMidLevelProperty() string
    GetSecondMidLevelProperty() string
    GetTopLevelProperty() string
}

// Struct proxy
type DiamondInheritanceTopLevelStruct struct {
    jsiiObjInstanceId string
    BaseLevelProperty string
    FirstMidLevelProperty string
    SecondMidLevelProperty string
    TopLevelProperty string
}

func (d *DiamondInheritanceTopLevelStruct) GetBaseLevelProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "baseLevelProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.BaseLevelProperty
}

func (d *DiamondInheritanceTopLevelStruct) GetFirstMidLevelProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "firstMidLevelProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.FirstMidLevelProperty
}

func (d *DiamondInheritanceTopLevelStruct) GetSecondMidLevelProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "secondMidLevelProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.SecondMidLevelProperty
}

func (d *DiamondInheritanceTopLevelStruct) GetTopLevelProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "topLevelProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.TopLevelProperty
}


func (obj *DiamondInheritanceTopLevelStruct) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Class interface
type DisappointingCollectionSourceIface interface {
    GetMaybeList() []string
    SetMaybeList(val []string)
    GetMaybeMap() map[string]float64
    SetMaybeMap(val map[string]float64)
}

// Verifies that null/undefined can be returned for optional collections.
// 
// This source of collections is disappointing - it'll always give you nothing :(
// Struct proxy
type DisappointingCollectionSource struct {
    jsiiObjInstanceId string
    // Some List of strings, maybe?
    // 
    // (Nah, just a billion dollars mistake!)
    MaybeList []string
    // Some Map of strings to numbers, maybe?
    // 
    // (Nah, just a billion dollars mistake!)
    MaybeMap map[string]float64
}

func (d *DisappointingCollectionSource) GetMaybeList() []string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "maybeList",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.MaybeList
}

func (d *DisappointingCollectionSource) GetMaybeMap() map[string]float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "maybeMap",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.MaybeMap
}


func (obj *DisappointingCollectionSource) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func (d *DisappointingCollectionSource) SetMaybeList(val []string) {
    d.MaybeList = val
}

func (d *DisappointingCollectionSource) SetMaybeMap(val map[string]float64) {
    d.MaybeMap = val
}

// Class interface
type DoNotOverridePrivatesIface interface {
    ChangePrivatePropertyValue(newValue string)
    PrivateMethodValue() string
    PrivatePropertyValue() string
}

// Struct proxy
type DoNotOverridePrivates struct {
    jsiiObjInstanceId string
}

func (obj *DoNotOverridePrivates) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewDoNotOverridePrivates() DoNotOverridePrivatesIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.DoNotOverridePrivates",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := DoNotOverridePrivates{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (d *DoNotOverridePrivates) ChangePrivatePropertyValue(newValue string) {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "changePrivatePropertyValue",
        Args: []interface{}{newValue},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (d *DoNotOverridePrivates) PrivateMethodValue() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "privateMethodValue",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

func (d *DoNotOverridePrivates) PrivatePropertyValue() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "privatePropertyValue",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

// Class interface
type DoNotRecognizeAnyAsOptionalIface interface {
    Method(_requiredAny __JSII__.Any, _optionalAny __JSII__.Any, _optionalString string)
}

// jsii#284: do not recognize "any" as an optional argument.
// Struct proxy
type DoNotRecognizeAnyAsOptional struct {
    jsiiObjInstanceId string
}

func (obj *DoNotRecognizeAnyAsOptional) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewDoNotRecognizeAnyAsOptional() DoNotRecognizeAnyAsOptionalIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.DoNotRecognizeAnyAsOptional",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := DoNotRecognizeAnyAsOptional{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (d *DoNotRecognizeAnyAsOptional) Method(_requiredAny __JSII__.Any, _optionalAny __JSII__.Any, _optionalString string) {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "method",
        Args: []interface{}{_requiredAny, _optionalAny, _optionalString},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

// Class interface
type DocumentedClassIface interface {
    Greet(greetee Greetee) float64
    Hola()
}

// Here's the first line of the TSDoc comment.
// 
// This is the meat of the TSDoc comment. It may contain
// multiple lines and multiple paragraphs.
// 
// Multiple paragraphs are separated by an empty line.
// Struct proxy
type DocumentedClass struct {
    jsiiObjInstanceId string
}

func (obj *DocumentedClass) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewDocumentedClass() DocumentedClassIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.DocumentedClass",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := DocumentedClass{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (d *DocumentedClass) Greet(greetee Greetee) float64 {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "greet",
        Args: []interface{}{greetee},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return 0.0
}

func (d *DocumentedClass) Hola() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "hola",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

// Class interface
type DontComplainAboutVariadicAfterOptionalIface interface {
    OptionalAndVariadic(optional string, things string) string
}

// Struct proxy
type DontComplainAboutVariadicAfterOptional struct {
    jsiiObjInstanceId string
}

func (obj *DontComplainAboutVariadicAfterOptional) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewDontComplainAboutVariadicAfterOptional() DontComplainAboutVariadicAfterOptionalIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.DontComplainAboutVariadicAfterOptional",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := DontComplainAboutVariadicAfterOptional{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (d *DontComplainAboutVariadicAfterOptional) OptionalAndVariadic(optional string, things string) string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "optionalAndVariadic",
        Args: []interface{}{optional, things},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

// Class interface
type DoubleTroubleIface interface {
    IFriendlyRandomGenerator
    IRandomNumberGenerator
    scopejsiicalclib.IFriendly
    Hello() string
    Next() float64
}

// Struct proxy
type DoubleTrouble struct {
    jsiiObjInstanceId string
}

func (obj *DoubleTrouble) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewDoubleTrouble() DoubleTroubleIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.DoubleTrouble",
        Interfaces: []string{"jsii-calc.IFriendlyRandomGenerator"},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := DoubleTrouble{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (d *DoubleTrouble) Hello() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "hello",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

func (d *DoubleTrouble) Next() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "next",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return 0.0
}

// Class interface
type DynamicPropertyBearerIface interface {
    GetDynamicProperty() string
    SetDynamicProperty(val string)
    GetValueStore() string
    SetValueStore(val string)
}

// Ensures we can override a dynamic property that was inherited.
// Struct proxy
type DynamicPropertyBearer struct {
    jsiiObjInstanceId string
    DynamicProperty string
    ValueStore string
}

func (d *DynamicPropertyBearer) GetDynamicProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "dynamicProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.DynamicProperty
}

func (d *DynamicPropertyBearer) GetValueStore() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "valueStore",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.ValueStore
}


func (obj *DynamicPropertyBearer) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewDynamicPropertyBearer(valueStore string) DynamicPropertyBearerIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.DynamicPropertyBearer",
        Interfaces: []string{},
        Args: []interface{}{valueStore},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := DynamicPropertyBearer{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (d *DynamicPropertyBearer) SetDynamicProperty(val string) {
    d.DynamicProperty = val
}

func (d *DynamicPropertyBearer) SetValueStore(val string) {
    d.ValueStore = val
}

// Class interface
type DynamicPropertyBearerChildIface interface {
    GetDynamicProperty() string
    SetDynamicProperty(val string)
    GetValueStore() string
    SetValueStore(val string)
    GetOriginalValue() string
    SetOriginalValue(val string)
    OverrideValue(newValue string) string
}

// Struct proxy
type DynamicPropertyBearerChild struct {
    jsiiObjInstanceId string
    DynamicProperty string
    ValueStore string
    OriginalValue string
}

func (d *DynamicPropertyBearerChild) GetDynamicProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "dynamicProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.DynamicProperty
}

func (d *DynamicPropertyBearerChild) GetValueStore() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "valueStore",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.ValueStore
}

func (d *DynamicPropertyBearerChild) GetOriginalValue() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "originalValue",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return d.OriginalValue
}


func (obj *DynamicPropertyBearerChild) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewDynamicPropertyBearerChild(originalValue string) DynamicPropertyBearerChildIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.DynamicPropertyBearerChild",
        Interfaces: []string{},
        Args: []interface{}{originalValue},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := DynamicPropertyBearerChild{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (d *DynamicPropertyBearerChild) SetDynamicProperty(val string) {
    d.DynamicProperty = val
}

func (d *DynamicPropertyBearerChild) SetValueStore(val string) {
    d.ValueStore = val
}

func (d *DynamicPropertyBearerChild) SetOriginalValue(val string) {
    d.OriginalValue = val
}

func (d *DynamicPropertyBearerChild) OverrideValue(newValue string) string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "overrideValue",
        Args: []interface{}{newValue},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: d.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

// Class interface
type EnumDispenserIface interface {
}

// Struct proxy
type EnumDispenser struct {
    jsiiObjInstanceId string
}

func (obj *EnumDispenser) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func EnumDispenser_RandomIntegerLikeEnum() AllTypesEnum {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.EnumDispenser",
        Method: "randomIntegerLikeEnum",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return "ENUM_DUMMY"
}

func EnumDispenser_RandomStringLikeEnum() StringEnum {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.EnumDispenser",
        Method: "randomStringLikeEnum",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return "ENUM_DUMMY"
}

// Class interface
type EraseUndefinedHashValuesIface interface {
}

// Struct proxy
type EraseUndefinedHashValues struct {
    jsiiObjInstanceId string
}

func (obj *EraseUndefinedHashValues) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewEraseUndefinedHashValues() EraseUndefinedHashValuesIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.EraseUndefinedHashValues",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := EraseUndefinedHashValues{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func EraseUndefinedHashValues_DoesKeyExist(opts EraseUndefinedHashValuesOptions, key string) bool {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.EraseUndefinedHashValues",
        Method: "doesKeyExist",
        Args: []interface{}{opts, key},
    })
    if err != nil {
        panic(err)
    }
    return true
}

func EraseUndefinedHashValues_Prop1IsNull() map[string]__JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.EraseUndefinedHashValues",
        Method: "prop1IsNull",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func EraseUndefinedHashValues_Prop2IsUndefined() map[string]__JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.EraseUndefinedHashValues",
        Method: "prop2IsUndefined",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

// EraseUndefinedHashValuesOptionsIface is the public interface for the custom type EraseUndefinedHashValuesOptions
type EraseUndefinedHashValuesOptionsIface interface {
    GetOption1() string
    GetOption2() string
}

// Struct proxy
type EraseUndefinedHashValuesOptions struct {
    jsiiObjInstanceId string
    Option1 string
    Option2 string
}

func (e *EraseUndefinedHashValuesOptions) GetOption1() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "option1",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: e.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return e.Option1
}

func (e *EraseUndefinedHashValuesOptions) GetOption2() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "option2",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: e.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return e.Option2
}


func (obj *EraseUndefinedHashValuesOptions) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Class interface
type ExperimentalClassIface interface {
    GetReadonlyProperty() string
    SetReadonlyProperty(val string)
    GetMutableProperty() float64
    SetMutableProperty(val float64)
    Method()
}

// Experimental.
// Struct proxy
type ExperimentalClass struct {
    jsiiObjInstanceId string
    // Experimental.
    ReadonlyProperty string
    // Experimental.
    MutableProperty float64
}

func (e *ExperimentalClass) GetReadonlyProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "readonlyProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: e.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return e.ReadonlyProperty
}

func (e *ExperimentalClass) GetMutableProperty() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "mutableProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: e.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return e.MutableProperty
}


func (obj *ExperimentalClass) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewExperimentalClass(readonlyString string, mutableNumber float64) ExperimentalClassIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.ExperimentalClass",
        Interfaces: []string{},
        Args: []interface{}{readonlyString, mutableNumber},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := ExperimentalClass{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (e *ExperimentalClass) SetReadonlyProperty(val string) {
    e.ReadonlyProperty = val
}

func (e *ExperimentalClass) SetMutableProperty(val float64) {
    e.MutableProperty = val
}

func (e *ExperimentalClass) Method() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "method",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: e.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

// Experimental.
type ExperimentalEnum string

const (
    ExperimentalEnumOptionA ExperimentalEnum = "OPTION_A"
    ExperimentalEnumOptionB ExperimentalEnum = "OPTION_B"
)

// ExperimentalStructIface is the public interface for the custom type ExperimentalStruct
// Experimental.
type ExperimentalStructIface interface {
    GetReadonlyProperty() string
}

// Experimental.
// Struct proxy
type ExperimentalStruct struct {
    jsiiObjInstanceId string
    // Experimental.
    ReadonlyProperty string
}

func (e *ExperimentalStruct) GetReadonlyProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "readonlyProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: e.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return e.ReadonlyProperty
}


func (obj *ExperimentalStruct) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Class interface
type ExportedBaseClassIface interface {
    GetSuccess() bool
    SetSuccess(val bool)
}

// Struct proxy
type ExportedBaseClass struct {
    jsiiObjInstanceId string
    Success bool
}

func (e *ExportedBaseClass) GetSuccess() bool {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "success",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: e.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return e.Success
}


func (obj *ExportedBaseClass) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewExportedBaseClass(success bool) ExportedBaseClassIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.ExportedBaseClass",
        Interfaces: []string{},
        Args: []interface{}{success},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := ExportedBaseClass{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (e *ExportedBaseClass) SetSuccess(val bool) {
    e.Success = val
}

// ExtendsInternalInterfaceIface is the public interface for the custom type ExtendsInternalInterface
type ExtendsInternalInterfaceIface interface {
    GetBoom() bool
    GetProp() string
}

// Struct proxy
type ExtendsInternalInterface struct {
    jsiiObjInstanceId string
    Boom bool
    Prop string
}

func (e *ExtendsInternalInterface) GetBoom() bool {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "boom",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: e.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return e.Boom
}

func (e *ExtendsInternalInterface) GetProp() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "prop",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: e.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return e.Prop
}


func (obj *ExtendsInternalInterface) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Class interface
type ExternalClassIface interface {
    GetReadonlyProperty() string
    SetReadonlyProperty(val string)
    GetMutableProperty() float64
    SetMutableProperty(val float64)
    Method()
}

// Struct proxy
type ExternalClass struct {
    jsiiObjInstanceId string
    ReadonlyProperty string
    MutableProperty float64
}

func (e *ExternalClass) GetReadonlyProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "readonlyProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: e.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return e.ReadonlyProperty
}

func (e *ExternalClass) GetMutableProperty() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "mutableProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: e.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return e.MutableProperty
}


func (obj *ExternalClass) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewExternalClass(readonlyString string, mutableNumber float64) ExternalClassIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.ExternalClass",
        Interfaces: []string{},
        Args: []interface{}{readonlyString, mutableNumber},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := ExternalClass{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (e *ExternalClass) SetReadonlyProperty(val string) {
    e.ReadonlyProperty = val
}

func (e *ExternalClass) SetMutableProperty(val float64) {
    e.MutableProperty = val
}

func (e *ExternalClass) Method() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "method",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: e.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

type ExternalEnum string

const (
    ExternalEnumOptionA ExternalEnum = "OPTION_A"
    ExternalEnumOptionB ExternalEnum = "OPTION_B"
)

// ExternalStructIface is the public interface for the custom type ExternalStruct
type ExternalStructIface interface {
    GetReadonlyProperty() string
}

// Struct proxy
type ExternalStruct struct {
    jsiiObjInstanceId string
    ReadonlyProperty string
}

func (e *ExternalStruct) GetReadonlyProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "readonlyProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: e.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return e.ReadonlyProperty
}


func (obj *ExternalStruct) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Class interface
type GiveMeStructsIface interface {
    GetStructLiteral() scopejsiicalclib.StructWithOnlyOptionals
    SetStructLiteral(val scopejsiicalclib.StructWithOnlyOptionals)
    DerivedToFirst(derived DerivedStruct) scopejsiicalclib.MyFirstStruct
    ReadDerivedNonPrimitive(derived DerivedStruct) DoubleTrouble
    ReadFirstNumber(first scopejsiicalclib.MyFirstStruct) float64
}

// Struct proxy
type GiveMeStructs struct {
    jsiiObjInstanceId string
    StructLiteral scopejsiicalclib.StructWithOnlyOptionals
}

func (g *GiveMeStructs) GetStructLiteral() scopejsiicalclib.StructWithOnlyOptionals {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "structLiteral",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: g.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return g.StructLiteral
}


func (obj *GiveMeStructs) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewGiveMeStructs() GiveMeStructsIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.GiveMeStructs",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := GiveMeStructs{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (g *GiveMeStructs) SetStructLiteral(val scopejsiicalclib.StructWithOnlyOptionals) {
    g.StructLiteral = val
}

func (g *GiveMeStructs) DerivedToFirst(derived DerivedStruct) scopejsiicalclib.MyFirstStruct {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "derivedToFirst",
        Args: []interface{}{derived},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: g.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return scopejsiicalclib.MyFirstStruct{}
}

func (g *GiveMeStructs) ReadDerivedNonPrimitive(derived DerivedStruct) DoubleTrouble {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "readDerivedNonPrimitive",
        Args: []interface{}{derived},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: g.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return DoubleTrouble{}
}

func (g *GiveMeStructs) ReadFirstNumber(first scopejsiicalclib.MyFirstStruct) float64 {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "readFirstNumber",
        Args: []interface{}{first},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: g.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return 0.0
}

// GreeteeIface is the public interface for the custom type Greetee
type GreeteeIface interface {
    GetName() string
}

// These are some arguments you can pass to a method.
// Struct proxy
type Greetee struct {
    jsiiObjInstanceId string
    // The name of the greetee.
    Name string
}

func (g *Greetee) GetName() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "name",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: g.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return g.Name
}


func (obj *Greetee) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Class interface
type GreetingAugmenterIface interface {
    BetterGreeting(friendly scopejsiicalclib.IFriendly) string
}

// Struct proxy
type GreetingAugmenter struct {
    jsiiObjInstanceId string
}

func (obj *GreetingAugmenter) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewGreetingAugmenter() GreetingAugmenterIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.GreetingAugmenter",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := GreetingAugmenter{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (g *GreetingAugmenter) BetterGreeting(friendly scopejsiicalclib.IFriendly) string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "betterGreeting",
        Args: []interface{}{friendly},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: g.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

// We can return an anonymous interface implementation from an override without losing the interface declarations.
type IAnonymousImplementationProvider interface {
    ProvideAsClass() Implementation
    ProvideAsInterface() IAnonymouslyImplementMe
}

type IAnonymouslyImplementMe interface {
    Verb() string
    GetValue() float64
}

type IAnotherPublicInterface interface {
    GetA() string
}

type IBell interface {
    Ring()
}

// Takes the object parameter as an interface.
type IBellRinger interface {
    YourTurn(bell IBell)
}

// Takes the object parameter as a calss.
type IConcreteBellRinger interface {
    YourTurn(bell Bell)
}

// Deprecated: useless interface
type IDeprecatedInterface interface {
    // Deprecated: services no purpose
    Method()
    // Deprecated: could be better
    GetMutableProperty() float64
}

// Experimental.
type IExperimentalInterface interface {
    // Experimental.
    Method()
    // Experimental.
    GetMutableProperty() float64
}

type IExtendsPrivateInterface interface {
    GetMoreThings() []string
    GetPrivate() string
}

type IExternalInterface interface {
    Method()
    GetMutableProperty() float64
}

// Even friendlier classes can implement this interface.
type IFriendlier interface {
    scopejsiicalclib.IFriendly
    // Say farewell.
    Farewell() string
    // Say goodbye.
    //
    // Returns: A goodbye blessing.
    Goodbye() string
}

type IFriendlyRandomGenerator interface {
    IRandomNumberGenerator
    scopejsiicalclib.IFriendly
}

// awslabs/jsii#220 Abstract return type.
type IInterfaceImplementedByAbstractClass interface {
    GetPropFromInterface() string
}

// Even though this interface has only properties, it is disqualified from being a datatype because it inherits from an interface that is not a datatype.
type IInterfaceThatShouldNotBeADataType interface {
    IInterfaceWithMethods
    GetOtherValue() string
}

type IInterfaceWithInternal interface {
    Visible()
}

type IInterfaceWithMethods interface {
    DoThings()
    GetValue() string
}

// awslabs/jsii#175 Interface proxies (and builders) do not respect optional arguments in methods.
type IInterfaceWithOptionalMethodArguments interface {
    Hello(arg1 string, arg2 float64)
}

type IInterfaceWithProperties interface {
    GetReadOnlyString() string
    GetReadWriteString() string
}

type IInterfaceWithPropertiesExtension interface {
    IInterfaceWithProperties
    GetFoo() float64
}

type Ijsii417Derived interface {
    Ijsii417PublicBaseOfBase
    Bar()
    Baz()
    GetProperty() string
}

type Ijsii417PublicBaseOfBase interface {
    Foo()
    GetHasRoot() bool
}

type IJsii487External interface {
}

type IJsii487External2 interface {
}

type IJsii496 interface {
}

type IMutableObjectLiteral interface {
    GetValue() string
}

type INonInternalInterface interface {
    IAnotherPublicInterface
    GetB() string
    GetC() string
}

// Make sure that setters are properly called on objects with interfaces.
type IObjectWithProperty interface {
    WasSet() bool
    GetProperty() string
}

// Checks that optional result from interface method code generates correctly.
type IOptionalMethod interface {
    Optional() string
}

type IPrivatelyImplemented interface {
    GetSuccess() bool
}

type IPublicInterface interface {
    Bye() string
}

type IPublicInterface2 interface {
    Ciao() string
}

// Generates random numbers.
type IRandomNumberGenerator interface {
    // Returns another random number.
    //
    // Returns: A random number.
    Next() float64
}

// Returns a subclass of a known class which implements an interface.
type IReturnJsii976 interface {
    GetFoo() float64
}

type IReturnsNumber interface {
    ObtainNumber() scopejsiicalclib.IDoublable
    GetNumberProp() scopejsiicalclib.Number
}

type IStableInterface interface {
    Method()
    GetMutableProperty() float64
}

// Verifies that a "pure" implementation of an interface works correctly.
type IStructReturningDelegate interface {
    ReturnStruct() StructB
}

// Class interface
type ImplementInternalInterfaceIface interface {
    GetProp() string
    SetProp(val string)
}

// Struct proxy
type ImplementInternalInterface struct {
    jsiiObjInstanceId string
    Prop string
}

func (i *ImplementInternalInterface) GetProp() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "prop",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: i.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return i.Prop
}


func (obj *ImplementInternalInterface) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewImplementInternalInterface() ImplementInternalInterfaceIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.ImplementInternalInterface",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := ImplementInternalInterface{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (i *ImplementInternalInterface) SetProp(val string) {
    i.Prop = val
}

// Class interface
type ImplementationIface interface {
    GetValue() float64
    SetValue(val float64)
}

// Struct proxy
type Implementation struct {
    jsiiObjInstanceId string
    Value float64
}

func (i *Implementation) GetValue() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "value",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: i.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return i.Value
}


func (obj *Implementation) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewImplementation() ImplementationIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.Implementation",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := Implementation{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (i *Implementation) SetValue(val float64) {
    i.Value = val
}

// Class interface
type ImplementsInterfaceWithInternalIface interface {
    IInterfaceWithInternal
    Visible()
}

// Struct proxy
type ImplementsInterfaceWithInternal struct {
    jsiiObjInstanceId string
}

func (obj *ImplementsInterfaceWithInternal) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewImplementsInterfaceWithInternal() ImplementsInterfaceWithInternalIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.ImplementsInterfaceWithInternal",
        Interfaces: []string{"jsii-calc.IInterfaceWithInternal"},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := ImplementsInterfaceWithInternal{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (i *ImplementsInterfaceWithInternal) Visible() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "visible",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: i.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

// Class interface
type ImplementsInterfaceWithInternalSubclassIface interface {
    IInterfaceWithInternal
    Visible()
}

// Struct proxy
type ImplementsInterfaceWithInternalSubclass struct {
    jsiiObjInstanceId string
}

func (obj *ImplementsInterfaceWithInternalSubclass) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewImplementsInterfaceWithInternalSubclass() ImplementsInterfaceWithInternalSubclassIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.ImplementsInterfaceWithInternalSubclass",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := ImplementsInterfaceWithInternalSubclass{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (i *ImplementsInterfaceWithInternalSubclass) Visible() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "visible",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: i.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

// Class interface
type ImplementsPrivateInterfaceIface interface {
    GetPrivate() string
    SetPrivate(val string)
}

// Struct proxy
type ImplementsPrivateInterface struct {
    jsiiObjInstanceId string
    Private string
}

func (i *ImplementsPrivateInterface) GetPrivate() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "private",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: i.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return i.Private
}


func (obj *ImplementsPrivateInterface) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewImplementsPrivateInterface() ImplementsPrivateInterfaceIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.ImplementsPrivateInterface",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := ImplementsPrivateInterface{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (i *ImplementsPrivateInterface) SetPrivate(val string) {
    i.Private = val
}

// ImplictBaseOfBaseIface is the public interface for the custom type ImplictBaseOfBase
type ImplictBaseOfBaseIface interface {
    GetFoo() scopejsiicalcbaseofbase.Very
    GetBar() string
    GetGoo() string
}

// Struct proxy
type ImplictBaseOfBase struct {
    jsiiObjInstanceId string
    Foo scopejsiicalcbaseofbase.Very
    Bar string
    Goo string
}

func (i *ImplictBaseOfBase) GetFoo() scopejsiicalcbaseofbase.Very {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "foo",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: i.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return i.Foo
}

func (i *ImplictBaseOfBase) GetBar() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "bar",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: i.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return i.Bar
}

func (i *ImplictBaseOfBase) GetGoo() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "goo",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: i.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return i.Goo
}


func (obj *ImplictBaseOfBase) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Class interface
type InbetweenClassIface interface {
    IPublicInterface2
    Hello()
    Ciao() string
}

// Struct proxy
type InbetweenClass struct {
    jsiiObjInstanceId string
}

func (obj *InbetweenClass) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewInbetweenClass() InbetweenClassIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.InbetweenClass",
        Interfaces: []string{"jsii-calc.IPublicInterface2"},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := InbetweenClass{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (i *InbetweenClass) Hello() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "hello",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: i.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (i *InbetweenClass) Ciao() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "ciao",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: i.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

// Class interface
type InterfaceCollectionsIface interface {
}

// Verifies that collections of interfaces or structs are correctly handled.
// 
// See: https://github.com/aws/jsii/issues/1196
// Struct proxy
type InterfaceCollections struct {
    jsiiObjInstanceId string
}

func (obj *InterfaceCollections) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func InterfaceCollections_ListOfInterfaces() []IBell {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.InterfaceCollections",
        Method: "listOfInterfaces",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func InterfaceCollections_ListOfStructs() []StructA {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.InterfaceCollections",
        Method: "listOfStructs",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func InterfaceCollections_MapOfInterfaces() map[string]IBell {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.InterfaceCollections",
        Method: "mapOfInterfaces",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func InterfaceCollections_MapOfStructs() map[string]StructA {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.InterfaceCollections",
        Method: "mapOfStructs",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

// Class interface
type InterfacesMakerIface interface {
}

// We can return arrays of interfaces See aws/aws-cdk#2362.
// Struct proxy
type InterfacesMaker struct {
    jsiiObjInstanceId string
}

func (obj *InterfacesMaker) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func InterfacesMaker_MakeInterfaces(count float64) []scopejsiicalclib.IDoublable {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.InterfacesMaker",
        Method: "makeInterfaces",
        Args: []interface{}{count},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

// Class interface
type IsomorphismIface interface {
    Myself() Isomorphism
}

// Checks the "same instance" isomorphism is preserved within the constructor.
// 
// Create a subclass of this, and assert that \`this.myself()\` actually returns
// \`this\` from within the constructor.
// Struct proxy
type Isomorphism struct {
    jsiiObjInstanceId string
}

func (obj *Isomorphism) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewIsomorphism() IsomorphismIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.Isomorphism",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := Isomorphism{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (i *Isomorphism) Myself() Isomorphism {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "myself",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: i.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return Isomorphism{}
}

// Class interface
type Jsii417DerivedIface interface {
    GetHasRoot() bool
    SetHasRoot(val bool)
    GetProperty() string
    Foo()
    Bar()
    Baz()
}

// Struct proxy
type Jsii417Derived struct {
    jsiiObjInstanceId string
    HasRoot bool
    Property string
}

func (j *Jsii417Derived) GetHasRoot() bool {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "hasRoot",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return j.HasRoot
}

func (j *Jsii417Derived) GetProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "property",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return j.Property
}


func (obj *Jsii417Derived) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewJsii417Derived(property string) Jsii417DerivedIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.JSII417Derived",
        Interfaces: []string{},
        Args: []interface{}{property},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := Jsii417Derived{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (j *Jsii417Derived) SetHasRoot(val bool) {
    j.HasRoot = val
}

func (j *Jsii417Derived) SetProperty(val string) {
    j.Property = val
}

func Jsii417Derived_MakeInstance() Jsii417PublicBaseOfBase {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.JSII417Derived",
        Method: "makeInstance",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return Jsii417PublicBaseOfBase{}
}

func (j *Jsii417Derived) Foo() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "foo",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *Jsii417Derived) Bar() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "bar",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *Jsii417Derived) Baz() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "baz",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

// Class interface
type Jsii417PublicBaseOfBaseIface interface {
    GetHasRoot() bool
    SetHasRoot(val bool)
    Foo()
}

// Struct proxy
type Jsii417PublicBaseOfBase struct {
    jsiiObjInstanceId string
    HasRoot bool
}

func (j *Jsii417PublicBaseOfBase) GetHasRoot() bool {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "hasRoot",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return j.HasRoot
}


func (obj *Jsii417PublicBaseOfBase) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewJsii417PublicBaseOfBase() Jsii417PublicBaseOfBaseIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.JSII417PublicBaseOfBase",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := Jsii417PublicBaseOfBase{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (j *Jsii417PublicBaseOfBase) SetHasRoot(val bool) {
    j.HasRoot = val
}

func Jsii417PublicBaseOfBase_MakeInstance() Jsii417PublicBaseOfBase {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.JSII417PublicBaseOfBase",
        Method: "makeInstance",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return Jsii417PublicBaseOfBase{}
}

func (j *Jsii417PublicBaseOfBase) Foo() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "foo",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

// Class interface
type JsObjectLiteralForInterfaceIface interface {
    GiveMeFriendly() scopejsiicalclib.IFriendly
    GiveMeFriendlyGenerator() IFriendlyRandomGenerator
}

// Struct proxy
type JsObjectLiteralForInterface struct {
    jsiiObjInstanceId string
}

func (obj *JsObjectLiteralForInterface) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewJsObjectLiteralForInterface() JsObjectLiteralForInterfaceIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.JSObjectLiteralForInterface",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := JsObjectLiteralForInterface{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (j *JsObjectLiteralForInterface) GiveMeFriendly() scopejsiicalclib.IFriendly {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "giveMeFriendly",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func (j *JsObjectLiteralForInterface) GiveMeFriendlyGenerator() IFriendlyRandomGenerator {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "giveMeFriendlyGenerator",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return nil
}

// Class interface
type JsObjectLiteralToNativeIface interface {
    ReturnLiteral() JsObjectLiteralToNativeClass
}

// Struct proxy
type JsObjectLiteralToNative struct {
    jsiiObjInstanceId string
}

func (obj *JsObjectLiteralToNative) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewJsObjectLiteralToNative() JsObjectLiteralToNativeIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.JSObjectLiteralToNative",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := JsObjectLiteralToNative{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (j *JsObjectLiteralToNative) ReturnLiteral() JsObjectLiteralToNativeClass {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "returnLiteral",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return JsObjectLiteralToNativeClass{}
}

// Class interface
type JsObjectLiteralToNativeClassIface interface {
    GetPropA() string
    SetPropA(val string)
    GetPropB() float64
    SetPropB(val float64)
}

// Struct proxy
type JsObjectLiteralToNativeClass struct {
    jsiiObjInstanceId string
    PropA string
    PropB float64
}

func (j *JsObjectLiteralToNativeClass) GetPropA() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "propA",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return j.PropA
}

func (j *JsObjectLiteralToNativeClass) GetPropB() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "propB",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return j.PropB
}


func (obj *JsObjectLiteralToNativeClass) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewJsObjectLiteralToNativeClass() JsObjectLiteralToNativeClassIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.JSObjectLiteralToNativeClass",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := JsObjectLiteralToNativeClass{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (j *JsObjectLiteralToNativeClass) SetPropA(val string) {
    j.PropA = val
}

func (j *JsObjectLiteralToNativeClass) SetPropB(val float64) {
    j.PropB = val
}

// Class interface
type JavaReservedWordsIface interface {
    GetWhile() string
    SetWhile(val string)
    Abstract()
    Assert()
    Boolean()
    Break()
    Byte()
    Case()
    Catch()
    Char()
    Class()
    Const()
    Continue()
    Default()
    Do()
    Double()
    Else()
    Enum()
    Extends()
    False()
    Final()
    Finally()
    Float()
    For()
    Goto()
    If()
    Implements()
    Import()
    Instanceof()
    Int()
    Interface()
    Long()
    Native()
    New()
    Null()
    Package()
    Private()
    Protected()
    Public()
    Return()
    Short()
    Static()
    Strictfp()
    Super()
    Switch()
    Synchronized()
    This()
    Throw()
    Throws()
    Transient()
    True()
    Try()
    Void()
    Volatile()
}

// Struct proxy
type JavaReservedWords struct {
    jsiiObjInstanceId string
    While string
}

func (j *JavaReservedWords) GetWhile() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "while",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return j.While
}


func (obj *JavaReservedWords) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewJavaReservedWords() JavaReservedWordsIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.JavaReservedWords",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := JavaReservedWords{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (j *JavaReservedWords) SetWhile(val string) {
    j.While = val
}

func (j *JavaReservedWords) Abstract() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "abstract",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Assert() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "assert",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Boolean() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "boolean",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Break() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "break",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Byte() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "byte",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Case() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "case",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Catch() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "catch",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Char() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "char",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Class() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "class",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Const() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "const",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Continue() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "continue",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Default() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "default",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Do() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "do",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Double() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "double",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Else() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "else",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Enum() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "enum",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Extends() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "extends",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) False() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "false",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Final() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "final",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Finally() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "finally",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Float() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "float",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) For() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "for",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Goto() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "goto",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) If() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "if",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Implements() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "implements",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Import() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "import",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Instanceof() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "instanceof",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Int() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "int",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Interface() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "interface",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Long() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "long",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Native() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "native",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) New() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "new",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Null() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "null",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Package() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "package",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Private() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "private",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Protected() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "protected",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Public() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "public",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Return() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "return",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Short() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "short",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Static() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "static",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Strictfp() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "strictfp",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Super() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "super",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Switch() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "switch",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Synchronized() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "synchronized",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) This() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "this",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Throw() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "throw",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Throws() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "throws",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Transient() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "transient",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) True() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "true",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Try() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "try",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Void() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "void",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (j *JavaReservedWords) Volatile() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "volatile",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

// Class interface
type Jsii487DerivedIface interface {
    IJsii487External2
    IJsii487External
}

// Struct proxy
type Jsii487Derived struct {
    jsiiObjInstanceId string
}

func (obj *Jsii487Derived) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewJsii487Derived() Jsii487DerivedIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.Jsii487Derived",
        Interfaces: []string{"jsii-calc.IJsii487External2", "jsii-calc.IJsii487External"},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := Jsii487Derived{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

// Class interface
type Jsii496DerivedIface interface {
    IJsii496
}

// Struct proxy
type Jsii496Derived struct {
    jsiiObjInstanceId string
}

func (obj *Jsii496Derived) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewJsii496Derived() Jsii496DerivedIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.Jsii496Derived",
        Interfaces: []string{"jsii-calc.IJsii496"},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := Jsii496Derived{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

// Class interface
type JsiiAgentIface interface {
    GetValue() string
    SetValue(val string)
}

// Host runtime version should be set via JSII_AGENT.
// Struct proxy
type JsiiAgent struct {
    jsiiObjInstanceId string
    // Returns the value of the JSII_AGENT environment variable.
    Value string
}

func (j *JsiiAgent) GetValue() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "value",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: j.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return j.Value
}


func (obj *JsiiAgent) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewJsiiAgent() JsiiAgentIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.JsiiAgent",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := JsiiAgent{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (j *JsiiAgent) SetValue(val string) {
    j.Value = val
}

// Class interface
type JsonFormatterIface interface {
}

// Make sure structs are un-decorated on the way in.
// See: https://github.com/aws/aws-cdk/issues/5066
//
// Struct proxy
type JsonFormatter struct {
    jsiiObjInstanceId string
}

func (obj *JsonFormatter) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func JsonFormatter_AnyArray() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.JsonFormatter",
        Method: "anyArray",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func JsonFormatter_AnyBooleanFalse() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.JsonFormatter",
        Method: "anyBooleanFalse",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func JsonFormatter_AnyBooleanTrue() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.JsonFormatter",
        Method: "anyBooleanTrue",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func JsonFormatter_AnyDate() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.JsonFormatter",
        Method: "anyDate",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func JsonFormatter_AnyEmptyString() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.JsonFormatter",
        Method: "anyEmptyString",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func JsonFormatter_AnyFunction() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.JsonFormatter",
        Method: "anyFunction",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func JsonFormatter_AnyHash() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.JsonFormatter",
        Method: "anyHash",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func JsonFormatter_AnyNull() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.JsonFormatter",
        Method: "anyNull",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func JsonFormatter_AnyNumber() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.JsonFormatter",
        Method: "anyNumber",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func JsonFormatter_AnyRef() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.JsonFormatter",
        Method: "anyRef",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func JsonFormatter_AnyString() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.JsonFormatter",
        Method: "anyString",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func JsonFormatter_AnyUndefined() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.JsonFormatter",
        Method: "anyUndefined",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func JsonFormatter_AnyZero() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.JsonFormatter",
        Method: "anyZero",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func JsonFormatter_Stringify(value __JSII__.Any) string {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.JsonFormatter",
        Method: "stringify",
        Args: []interface{}{value},
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

// Class interface
type LevelOneIface interface {
    GetProps() LevelOneProps
    SetProps(val LevelOneProps)
}

// Validates that nested classes get correct code generation for the occasional forward reference.
// Struct proxy
type LevelOne struct {
    jsiiObjInstanceId string
    Props LevelOneProps
}

func (l *LevelOne) GetProps() LevelOneProps {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "props",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: l.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return l.Props
}


func (obj *LevelOne) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewLevelOne(props LevelOneProps) LevelOneIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.LevelOne",
        Interfaces: []string{},
        Args: []interface{}{props},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := LevelOne{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (l *LevelOne) SetProps(val LevelOneProps) {
    l.Props = val
}

// PropBooleanValueIface is the public interface for the custom type PropBooleanValue
type PropBooleanValueIface interface {
    GetValue() bool
}

// Struct proxy
type PropBooleanValue struct {
    jsiiObjInstanceId string
    Value bool
}

func (p *PropBooleanValue) GetValue() bool {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "value",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return p.Value
}


func (obj *PropBooleanValue) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// PropPropertyIface is the public interface for the custom type PropProperty
type PropPropertyIface interface {
    GetProp() PropBooleanValue
}

// Struct proxy
type PropProperty struct {
    jsiiObjInstanceId string
    Prop PropBooleanValue
}

func (p *PropProperty) GetProp() PropBooleanValue {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "prop",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return p.Prop
}


func (obj *PropProperty) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// LevelOnePropsIface is the public interface for the custom type LevelOneProps
type LevelOnePropsIface interface {
    GetProp() PropProperty
}

// Struct proxy
type LevelOneProps struct {
    jsiiObjInstanceId string
    Prop PropProperty
}

func (l *LevelOneProps) GetProp() PropProperty {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "prop",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: l.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return l.Prop
}


func (obj *LevelOneProps) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// LoadBalancedFargateServicePropsIface is the public interface for the custom type LoadBalancedFargateServiceProps
type LoadBalancedFargateServicePropsIface interface {
    GetContainerPort() float64
    GetCpu() string
    GetMemoryMiB() string
    GetPublicLoadBalancer() bool
    GetPublicTasks() bool
}

// jsii#298: show default values in sphinx documentation, and respect newlines.
// Struct proxy
type LoadBalancedFargateServiceProps struct {
    jsiiObjInstanceId string
    // The container port of the application load balancer attached to your Fargate service.
    // 
    // Corresponds to container port mapping.
    ContainerPort float64
    // The number of cpu units used by the task.
    // 
    // Valid values, which determines your range of valid values for the memory parameter:
    // 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
    // 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
    // 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
    // 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
    // 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
    // 
    // This default is set in the underlying FargateTaskDefinition construct.
    Cpu string
    // The amount (in MiB) of memory used by the task.
    // 
    // This field is required and you must use one of the following values, which determines your range of valid values
    // for the cpu parameter:
    // 
    // 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
    // 
    // 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
    // 
    // 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
    // 
    // Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
    // 
    // Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
    // 
    // This default is set in the underlying FargateTaskDefinition construct.
    MemoryMiB string
    // Determines whether the Application Load Balancer will be internet-facing.
    PublicLoadBalancer bool
    // Determines whether your Fargate Service will be assigned a public IP address.
    PublicTasks bool
}

func (l *LoadBalancedFargateServiceProps) GetContainerPort() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "containerPort",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: l.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return l.ContainerPort
}

func (l *LoadBalancedFargateServiceProps) GetCpu() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "cpu",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: l.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return l.Cpu
}

func (l *LoadBalancedFargateServiceProps) GetMemoryMiB() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "memoryMiB",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: l.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return l.MemoryMiB
}

func (l *LoadBalancedFargateServiceProps) GetPublicLoadBalancer() bool {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "publicLoadBalancer",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: l.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return l.PublicLoadBalancer
}

func (l *LoadBalancedFargateServiceProps) GetPublicTasks() bool {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "publicTasks",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: l.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return l.PublicTasks
}


func (obj *LoadBalancedFargateServiceProps) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Class interface
type MethodNamedPropertyIface interface {
    GetElite() float64
    SetElite(val float64)
    Property() string
}

// Struct proxy
type MethodNamedProperty struct {
    jsiiObjInstanceId string
    Elite float64
}

func (m *MethodNamedProperty) GetElite() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "elite",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: m.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return m.Elite
}


func (obj *MethodNamedProperty) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewMethodNamedProperty() MethodNamedPropertyIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.MethodNamedProperty",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := MethodNamedProperty{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (m *MethodNamedProperty) SetElite(val float64) {
    m.Elite = val
}

func (m *MethodNamedProperty) Property() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "property",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: m.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

// Class interface
type MultiplyIface interface {
    scopejsiicalclib.IFriendly
    IFriendlier
    scopejsiicalclib.IFriendly
    IRandomNumberGenerator
    GetValue() float64
    SetValue(val float64)
    GetLhs() scopejsiicalclib.NumericValue
    SetLhs(val scopejsiicalclib.NumericValue)
    GetRhs() scopejsiicalclib.NumericValue
    SetRhs(val scopejsiicalclib.NumericValue)
    TypeName() __JSII__.Any
    ToString() string
    Hello() string
    Farewell() string
    Goodbye() string
    Next() float64
}

// The "*" binary operation.
// Struct proxy
type Multiply struct {
    jsiiObjInstanceId string
    // (deprecated) The value.
    Value float64
    // Left-hand side operand.
    Lhs scopejsiicalclib.NumericValue
    // Right-hand side operand.
    Rhs scopejsiicalclib.NumericValue
}

func (m *Multiply) GetValue() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "value",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: m.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return m.Value
}

func (m *Multiply) GetLhs() scopejsiicalclib.NumericValue {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "lhs",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: m.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return m.Lhs
}

func (m *Multiply) GetRhs() scopejsiicalclib.NumericValue {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "rhs",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: m.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return m.Rhs
}


func (obj *Multiply) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Creates a BinaryOperation.
func NewMultiply(lhs scopejsiicalclib.NumericValue, rhs scopejsiicalclib.NumericValue) MultiplyIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.Multiply",
        Interfaces: []string{"jsii-calc.IFriendlier", "jsii-calc.IRandomNumberGenerator"},
        Args: []interface{}{lhs, rhs},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := Multiply{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (m *Multiply) SetValue(val float64) {
    m.Value = val
}

func (m *Multiply) SetLhs(val scopejsiicalclib.NumericValue) {
    m.Lhs = val
}

func (m *Multiply) SetRhs(val scopejsiicalclib.NumericValue) {
    m.Rhs = val
}

func (m *Multiply) TypeName() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "typeName",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: m.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func (m *Multiply) ToString() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "toString",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: m.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

func (m *Multiply) Hello() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "hello",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: m.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

func (m *Multiply) Farewell() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "farewell",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: m.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

func (m *Multiply) Goodbye() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "goodbye",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: m.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

func (m *Multiply) Next() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "next",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: m.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return 0.0
}

// Class interface
type NegateIface interface {
    IFriendlier
    scopejsiicalclib.IFriendly
    GetValue() float64
    SetValue(val float64)
    GetOperand() scopejsiicalclib.NumericValue
    SetOperand(val scopejsiicalclib.NumericValue)
    TypeName() __JSII__.Any
    ToString() string
    Farewell() string
    Goodbye() string
    Hello() string
}

// The negation operation ("-value").
// Struct proxy
type Negate struct {
    jsiiObjInstanceId string
    // (deprecated) The value.
    Value float64
    Operand scopejsiicalclib.NumericValue
}

func (n *Negate) GetValue() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "value",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return n.Value
}

func (n *Negate) GetOperand() scopejsiicalclib.NumericValue {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "operand",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return n.Operand
}


func (obj *Negate) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewNegate(operand scopejsiicalclib.NumericValue) NegateIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.Negate",
        Interfaces: []string{"jsii-calc.IFriendlier"},
        Args: []interface{}{operand},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := Negate{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (n *Negate) SetValue(val float64) {
    n.Value = val
}

func (n *Negate) SetOperand(val scopejsiicalclib.NumericValue) {
    n.Operand = val
}

func (n *Negate) TypeName() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "typeName",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func (n *Negate) ToString() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "toString",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

func (n *Negate) Farewell() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "farewell",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

func (n *Negate) Goodbye() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "goodbye",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

func (n *Negate) Hello() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "hello",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

// Class interface
type NestedClassInstanceIface interface {
}

// Struct proxy
type NestedClassInstance struct {
    jsiiObjInstanceId string
}

func (obj *NestedClassInstance) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NestedClassInstance_MakeInstance() submodule.NestedClass {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.NestedClassInstance",
        Method: "makeInstance",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return submodule.NestedClass{}
}

// NestedStructIface is the public interface for the custom type NestedStruct
type NestedStructIface interface {
    GetNumberProp() float64
}

// Struct proxy
type NestedStruct struct {
    jsiiObjInstanceId string
    // When provided, must be > 0.
    NumberProp float64
}

func (n *NestedStruct) GetNumberProp() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "numberProp",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return n.NumberProp
}


func (obj *NestedStruct) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Class interface
type NodeStandardLibraryIface interface {
    GetOsPlatform() string
    SetOsPlatform(val string)
    CryptoSha256() string
    FsReadFile() string
    FsReadFileSync() string
}

// Test fixture to verify that jsii modules can use the node standard library.
// Struct proxy
type NodeStandardLibrary struct {
    jsiiObjInstanceId string
    // Returns the current os.platform() from the "os" node module.
    OsPlatform string
}

func (n *NodeStandardLibrary) GetOsPlatform() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "osPlatform",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return n.OsPlatform
}


func (obj *NodeStandardLibrary) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewNodeStandardLibrary() NodeStandardLibraryIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.NodeStandardLibrary",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := NodeStandardLibrary{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (n *NodeStandardLibrary) SetOsPlatform(val string) {
    n.OsPlatform = val
}

func (n *NodeStandardLibrary) CryptoSha256() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "cryptoSha256",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

func (n *NodeStandardLibrary) FsReadFile() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "fsReadFile",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

func (n *NodeStandardLibrary) FsReadFileSync() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "fsReadFileSync",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

// Class interface
type NullShouldBeTreatedAsUndefinedIface interface {
    GetChangeMeToUndefined() string
    SetChangeMeToUndefined(val string)
    GiveMeUndefined(value __JSII__.Any)
    GiveMeUndefinedInsideAnObject(input NullShouldBeTreatedAsUndefinedData)
    VerifyPropertyIsUndefined()
}

// jsii#282, aws-cdk#157: null should be treated as "undefined".
// Struct proxy
type NullShouldBeTreatedAsUndefined struct {
    jsiiObjInstanceId string
    ChangeMeToUndefined string
}

func (n *NullShouldBeTreatedAsUndefined) GetChangeMeToUndefined() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "changeMeToUndefined",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return n.ChangeMeToUndefined
}


func (obj *NullShouldBeTreatedAsUndefined) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewNullShouldBeTreatedAsUndefined(_param1 string, optional __JSII__.Any) NullShouldBeTreatedAsUndefinedIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.NullShouldBeTreatedAsUndefined",
        Interfaces: []string{},
        Args: []interface{}{_param1, optional},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := NullShouldBeTreatedAsUndefined{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (n *NullShouldBeTreatedAsUndefined) SetChangeMeToUndefined(val string) {
    n.ChangeMeToUndefined = val
}

func (n *NullShouldBeTreatedAsUndefined) GiveMeUndefined(value __JSII__.Any) {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "giveMeUndefined",
        Args: []interface{}{value},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (n *NullShouldBeTreatedAsUndefined) GiveMeUndefinedInsideAnObject(input NullShouldBeTreatedAsUndefinedData) {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "giveMeUndefinedInsideAnObject",
        Args: []interface{}{input},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (n *NullShouldBeTreatedAsUndefined) VerifyPropertyIsUndefined() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "verifyPropertyIsUndefined",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

// NullShouldBeTreatedAsUndefinedDataIface is the public interface for the custom type NullShouldBeTreatedAsUndefinedData
type NullShouldBeTreatedAsUndefinedDataIface interface {
    GetArrayWithThreeElementsAndUndefinedAsSecondArgument() []__JSII__.Any
    GetThisShouldBeUndefined() __JSII__.Any
}

// Struct proxy
type NullShouldBeTreatedAsUndefinedData struct {
    jsiiObjInstanceId string
    ArrayWithThreeElementsAndUndefinedAsSecondArgument []__JSII__.Any
    ThisShouldBeUndefined __JSII__.Any
}

func (n *NullShouldBeTreatedAsUndefinedData) GetArrayWithThreeElementsAndUndefinedAsSecondArgument() []__JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "arrayWithThreeElementsAndUndefinedAsSecondArgument",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return n.ArrayWithThreeElementsAndUndefinedAsSecondArgument
}

func (n *NullShouldBeTreatedAsUndefinedData) GetThisShouldBeUndefined() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "thisShouldBeUndefined",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return n.ThisShouldBeUndefined
}


func (obj *NullShouldBeTreatedAsUndefinedData) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Class interface
type NumberGeneratorIface interface {
    GetGenerator() IRandomNumberGenerator
    SetGenerator(val IRandomNumberGenerator)
    IsSameGenerator(gen IRandomNumberGenerator) bool
    NextTimes100() float64
}

// This allows us to test that a reference can be stored for objects that implement interfaces.
// Struct proxy
type NumberGenerator struct {
    jsiiObjInstanceId string
    Generator IRandomNumberGenerator
}

func (n *NumberGenerator) GetGenerator() IRandomNumberGenerator {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "generator",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return n.Generator
}


func (obj *NumberGenerator) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewNumberGenerator(generator IRandomNumberGenerator) NumberGeneratorIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.NumberGenerator",
        Interfaces: []string{},
        Args: []interface{}{generator},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := NumberGenerator{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (n *NumberGenerator) SetGenerator(val IRandomNumberGenerator) {
    n.Generator = val
}

func (n *NumberGenerator) IsSameGenerator(gen IRandomNumberGenerator) bool {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "isSameGenerator",
        Args: []interface{}{gen},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return true
}

func (n *NumberGenerator) NextTimes100() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "nextTimes100",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return 0.0
}

// Class interface
type ObjectRefsInCollectionsIface interface {
    SumFromArray(values []scopejsiicalclib.NumericValue) float64
    SumFromMap(values map[string]scopejsiicalclib.NumericValue) float64
}

// Verify that object references can be passed inside collections.
// Struct proxy
type ObjectRefsInCollections struct {
    jsiiObjInstanceId string
}

func (obj *ObjectRefsInCollections) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewObjectRefsInCollections() ObjectRefsInCollectionsIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.ObjectRefsInCollections",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := ObjectRefsInCollections{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (o *ObjectRefsInCollections) SumFromArray(values []scopejsiicalclib.NumericValue) float64 {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "sumFromArray",
        Args: []interface{}{values},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: o.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return 0.0
}

func (o *ObjectRefsInCollections) SumFromMap(values map[string]scopejsiicalclib.NumericValue) float64 {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "sumFromMap",
        Args: []interface{}{values},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: o.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return 0.0
}

// Class interface
type ObjectWithPropertyProviderIface interface {
}

// Struct proxy
type ObjectWithPropertyProvider struct {
    jsiiObjInstanceId string
}

func (obj *ObjectWithPropertyProvider) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func ObjectWithPropertyProvider_Provide() IObjectWithProperty {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.ObjectWithPropertyProvider",
        Method: "provide",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

// Class interface
type OldIface interface {
    DoAThing()
}

// Old class.
// Deprecated: Use the new class
// Struct proxy
type Old struct {
    jsiiObjInstanceId string
}

func (obj *Old) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewOld() OldIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.Old",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := Old{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (o *Old) DoAThing() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "doAThing",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: o.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

// Class interface
type OptionalArgumentInvokerIface interface {
    InvokeWithOptional()
    InvokeWithoutOptional()
}

// Struct proxy
type OptionalArgumentInvoker struct {
    jsiiObjInstanceId string
}

func (obj *OptionalArgumentInvoker) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewOptionalArgumentInvoker(delegate IInterfaceWithOptionalMethodArguments) OptionalArgumentInvokerIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.OptionalArgumentInvoker",
        Interfaces: []string{},
        Args: []interface{}{delegate},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := OptionalArgumentInvoker{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (o *OptionalArgumentInvoker) InvokeWithOptional() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "invokeWithOptional",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: o.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (o *OptionalArgumentInvoker) InvokeWithoutOptional() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "invokeWithoutOptional",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: o.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

// Class interface
type OptionalConstructorArgumentIface interface {
    GetArg1() float64
    SetArg1(val float64)
    GetArg2() string
    SetArg2(val string)
    GetArg3() string
    SetArg3(val string)
}

// Struct proxy
type OptionalConstructorArgument struct {
    jsiiObjInstanceId string
    Arg1 float64
    Arg2 string
    Arg3 string
}

func (o *OptionalConstructorArgument) GetArg1() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "arg1",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: o.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return o.Arg1
}

func (o *OptionalConstructorArgument) GetArg2() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "arg2",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: o.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return o.Arg2
}

func (o *OptionalConstructorArgument) GetArg3() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "arg3",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: o.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return o.Arg3
}


func (obj *OptionalConstructorArgument) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewOptionalConstructorArgument(arg1 float64, arg2 string, arg3 string) OptionalConstructorArgumentIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.OptionalConstructorArgument",
        Interfaces: []string{},
        Args: []interface{}{arg1, arg2, arg3},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := OptionalConstructorArgument{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (o *OptionalConstructorArgument) SetArg1(val float64) {
    o.Arg1 = val
}

func (o *OptionalConstructorArgument) SetArg2(val string) {
    o.Arg2 = val
}

func (o *OptionalConstructorArgument) SetArg3(val string) {
    o.Arg3 = val
}

// OptionalStructIface is the public interface for the custom type OptionalStruct
type OptionalStructIface interface {
    GetField() string
}

// Struct proxy
type OptionalStruct struct {
    jsiiObjInstanceId string
    Field string
}

func (o *OptionalStruct) GetField() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "field",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: o.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return o.Field
}


func (obj *OptionalStruct) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Class interface
type OptionalStructConsumerIface interface {
    GetParameterWasUndefined() bool
    SetParameterWasUndefined(val bool)
    GetFieldValue() string
    SetFieldValue(val string)
}

// Struct proxy
type OptionalStructConsumer struct {
    jsiiObjInstanceId string
    ParameterWasUndefined bool
    FieldValue string
}

func (o *OptionalStructConsumer) GetParameterWasUndefined() bool {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "parameterWasUndefined",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: o.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return o.ParameterWasUndefined
}

func (o *OptionalStructConsumer) GetFieldValue() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "fieldValue",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: o.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return o.FieldValue
}


func (obj *OptionalStructConsumer) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewOptionalStructConsumer(optionalStruct OptionalStruct) OptionalStructConsumerIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.OptionalStructConsumer",
        Interfaces: []string{},
        Args: []interface{}{optionalStruct},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := OptionalStructConsumer{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (o *OptionalStructConsumer) SetParameterWasUndefined(val bool) {
    o.ParameterWasUndefined = val
}

func (o *OptionalStructConsumer) SetFieldValue(val string) {
    o.FieldValue = val
}

// Class interface
type OverridableProtectedMemberIface interface {
    GetOverrideReadOnly() string
    GetOverrideReadWrite() string
    OverrideMe() string
    SwitchModes()
    ValueFromProtected() string
}

// See: https://github.com/aws/jsii/issues/903
//
// Struct proxy
type OverridableProtectedMember struct {
    jsiiObjInstanceId string
    OverrideReadOnly string
    OverrideReadWrite string
}

func (o *OverridableProtectedMember) GetOverrideReadOnly() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "overrideReadOnly",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: o.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return o.OverrideReadOnly
}

func (o *OverridableProtectedMember) GetOverrideReadWrite() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "overrideReadWrite",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: o.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return o.OverrideReadWrite
}


func (obj *OverridableProtectedMember) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewOverridableProtectedMember() OverridableProtectedMemberIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.OverridableProtectedMember",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := OverridableProtectedMember{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (o *OverridableProtectedMember) SetOverrideReadOnly(val string) {
    o.OverrideReadOnly = val
}

func (o *OverridableProtectedMember) SetOverrideReadWrite(val string) {
    o.OverrideReadWrite = val
}

func (o *OverridableProtectedMember) OverrideMe() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "overrideMe",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: o.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

func (o *OverridableProtectedMember) SwitchModes() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "switchModes",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: o.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (o *OverridableProtectedMember) ValueFromProtected() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "valueFromProtected",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: o.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

// Class interface
type OverrideReturnsObjectIface interface {
    Test(obj IReturnsNumber) float64
}

// Struct proxy
type OverrideReturnsObject struct {
    jsiiObjInstanceId string
}

func (obj *OverrideReturnsObject) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewOverrideReturnsObject() OverrideReturnsObjectIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.OverrideReturnsObject",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := OverrideReturnsObject{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (o *OverrideReturnsObject) Test(obj IReturnsNumber) float64 {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "test",
        Args: []interface{}{obj},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: o.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return 0.0
}

// ParentStruct982Iface is the public interface for the custom type ParentStruct982
type ParentStruct982Iface interface {
    GetFoo() string
}

// https://github.com/aws/jsii/issues/982.
// Struct proxy
type ParentStruct982 struct {
    jsiiObjInstanceId string
    Foo string
}

func (p *ParentStruct982) GetFoo() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "foo",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return p.Foo
}


func (obj *ParentStruct982) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Class interface
type PartiallyInitializedThisConsumerIface interface {
    ConsumePartiallyInitializedThis(obj ConstructorPassesThisOut, dt string, ev AllTypesEnum) string
}

// Struct proxy
type PartiallyInitializedThisConsumer struct {
    jsiiObjInstanceId string
}

func (obj *PartiallyInitializedThisConsumer) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewPartiallyInitializedThisConsumer() PartiallyInitializedThisConsumerIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.PartiallyInitializedThisConsumer",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := PartiallyInitializedThisConsumer{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (p *PartiallyInitializedThisConsumer) ConsumePartiallyInitializedThis(obj ConstructorPassesThisOut, dt string, ev AllTypesEnum) string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "consumePartiallyInitializedThis",
        Args: []interface{}{obj, dt, ev},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

// Class interface
type PolymorphismIface interface {
    SayHello(friendly scopejsiicalclib.IFriendly) string
}

// Struct proxy
type Polymorphism struct {
    jsiiObjInstanceId string
}

func (obj *Polymorphism) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewPolymorphism() PolymorphismIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.Polymorphism",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := Polymorphism{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (p *Polymorphism) SayHello(friendly scopejsiicalclib.IFriendly) string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "sayHello",
        Args: []interface{}{friendly},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

// Class interface
type PowerIface interface {
    GetValue() float64
    SetValue(val float64)
    GetExpression() scopejsiicalclib.NumericValue
    SetExpression(val scopejsiicalclib.NumericValue)
    GetDecorationPostfixes() []string
    SetDecorationPostfixes(val []string)
    GetDecorationPrefixes() []string
    SetDecorationPrefixes(val []string)
    GetStringStyle() composition.CompositionStringStyle
    SetStringStyle(val composition.CompositionStringStyle)
    GetBase() scopejsiicalclib.NumericValue
    SetBase(val scopejsiicalclib.NumericValue)
    GetPow() scopejsiicalclib.NumericValue
    SetPow(val scopejsiicalclib.NumericValue)
    TypeName() __JSII__.Any
    ToString() string
}

// The power operation.
// Struct proxy
type Power struct {
    jsiiObjInstanceId string
    // (deprecated) The value.
    Value float64
    // The expression that this operation consists of.
    // 
    // Must be implemented by derived classes.
    Expression scopejsiicalclib.NumericValue
    // A set of postfixes to include in a decorated .toString().
    DecorationPostfixes []string
    // A set of prefixes to include in a decorated .toString().
    DecorationPrefixes []string
    // The .toString() style.
    StringStyle composition.CompositionStringStyle
    // The base of the power.
    Base scopejsiicalclib.NumericValue
    // The number of times to multiply.
    Pow scopejsiicalclib.NumericValue
}

func (p *Power) GetValue() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "value",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return p.Value
}

func (p *Power) GetExpression() scopejsiicalclib.NumericValue {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "expression",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return p.Expression
}

func (p *Power) GetDecorationPostfixes() []string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "decorationPostfixes",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return p.DecorationPostfixes
}

func (p *Power) GetDecorationPrefixes() []string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "decorationPrefixes",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return p.DecorationPrefixes
}

func (p *Power) GetStringStyle() composition.CompositionStringStyle {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "stringStyle",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return p.StringStyle
}

func (p *Power) GetBase() scopejsiicalclib.NumericValue {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "base",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return p.Base
}

func (p *Power) GetPow() scopejsiicalclib.NumericValue {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "pow",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return p.Pow
}


func (obj *Power) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Creates a Power operation.
func NewPower(base scopejsiicalclib.NumericValue, pow scopejsiicalclib.NumericValue) PowerIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.Power",
        Interfaces: []string{},
        Args: []interface{}{base, pow},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := Power{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (p *Power) SetValue(val float64) {
    p.Value = val
}

func (p *Power) SetExpression(val scopejsiicalclib.NumericValue) {
    p.Expression = val
}

func (p *Power) SetDecorationPostfixes(val []string) {
    p.DecorationPostfixes = val
}

func (p *Power) SetDecorationPrefixes(val []string) {
    p.DecorationPrefixes = val
}

func (p *Power) SetStringStyle(val composition.CompositionStringStyle) {
    p.StringStyle = val
}

func (p *Power) SetBase(val scopejsiicalclib.NumericValue) {
    p.Base = val
}

func (p *Power) SetPow(val scopejsiicalclib.NumericValue) {
    p.Pow = val
}

func (p *Power) TypeName() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "typeName",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func (p *Power) ToString() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "toString",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

// Class interface
type PropertyNamedPropertyIface interface {
    GetProperty() string
    SetProperty(val string)
    GetYetAnoterOne() bool
    SetYetAnoterOne(val bool)
}

// Reproduction for https://github.com/aws/jsii/issues/1113 Where a method or property named "property" would result in impossible to load Python code.
// Struct proxy
type PropertyNamedProperty struct {
    jsiiObjInstanceId string
    Property string
    YetAnoterOne bool
}

func (p *PropertyNamedProperty) GetProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "property",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return p.Property
}

func (p *PropertyNamedProperty) GetYetAnoterOne() bool {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "yetAnoterOne",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return p.YetAnoterOne
}


func (obj *PropertyNamedProperty) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewPropertyNamedProperty() PropertyNamedPropertyIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.PropertyNamedProperty",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := PropertyNamedProperty{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (p *PropertyNamedProperty) SetProperty(val string) {
    p.Property = val
}

func (p *PropertyNamedProperty) SetYetAnoterOne(val bool) {
    p.YetAnoterOne = val
}

// Class interface
type PublicClassIface interface {
    Hello()
}

// Struct proxy
type PublicClass struct {
    jsiiObjInstanceId string
}

func (obj *PublicClass) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewPublicClass() PublicClassIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.PublicClass",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := PublicClass{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (p *PublicClass) Hello() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "hello",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

// Class interface
type PythonReservedWordsIface interface {
    And()
    As()
    Assert()
    Async()
    Await()
    Break()
    Class()
    Continue()
    Def()
    Del()
    Elif()
    Else()
    Except()
    Finally()
    For()
    From()
    Global()
    If()
    Import()
    In()
    Is()
    Lambda()
    Nonlocal()
    Not()
    Or()
    Pass()
    Raise()
    Return()
    Try()
    While()
    With()
    Yield()
}

// Struct proxy
type PythonReservedWords struct {
    jsiiObjInstanceId string
}

func (obj *PythonReservedWords) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewPythonReservedWords() PythonReservedWordsIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.PythonReservedWords",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := PythonReservedWords{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (p *PythonReservedWords) And() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "and",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) As() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "as",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) Assert() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "assert",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) Async() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "async",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) Await() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "await",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) Break() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "break",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) Class() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "class",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) Continue() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "continue",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) Def() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "def",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) Del() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "del",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) Elif() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "elif",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) Else() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "else",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) Except() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "except",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) Finally() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "finally",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) For() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "for",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) From() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "from",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) Global() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "global",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) If() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "if",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) Import() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "import",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) In() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "in",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) Is() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "is",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) Lambda() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "lambda",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) Nonlocal() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "nonlocal",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) Not() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "not",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) Or() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "or",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) Pass() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "pass",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) Raise() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "raise",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) Return() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "return",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) Try() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "try",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) While() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "while",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) With() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "with",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (p *PythonReservedWords) Yield() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "yield",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: p.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

// Class interface
type ReferenceEnumFromScopedPackageIface interface {
    GetFoo() scopejsiicalclib.EnumFromScopedModule
    SetFoo(val scopejsiicalclib.EnumFromScopedModule)
    LoadFoo() scopejsiicalclib.EnumFromScopedModule
    SaveFoo(value scopejsiicalclib.EnumFromScopedModule)
}

// See awslabs/jsii#138.
// Struct proxy
type ReferenceEnumFromScopedPackage struct {
    jsiiObjInstanceId string
    Foo scopejsiicalclib.EnumFromScopedModule
}

func (r *ReferenceEnumFromScopedPackage) GetFoo() scopejsiicalclib.EnumFromScopedModule {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "foo",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: r.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return r.Foo
}


func (obj *ReferenceEnumFromScopedPackage) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewReferenceEnumFromScopedPackage() ReferenceEnumFromScopedPackageIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.ReferenceEnumFromScopedPackage",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := ReferenceEnumFromScopedPackage{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (r *ReferenceEnumFromScopedPackage) SetFoo(val scopejsiicalclib.EnumFromScopedModule) {
    r.Foo = val
}

func (r *ReferenceEnumFromScopedPackage) LoadFoo() scopejsiicalclib.EnumFromScopedModule {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "loadFoo",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: r.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "ENUM_DUMMY"
}

func (r *ReferenceEnumFromScopedPackage) SaveFoo(value scopejsiicalclib.EnumFromScopedModule) {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "saveFoo",
        Args: []interface{}{value},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: r.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

// Class interface
type ReturnsPrivateImplementationOfInterfaceIface interface {
    GetPrivateImplementation() IPrivatelyImplemented
    SetPrivateImplementation(val IPrivatelyImplemented)
}

// Helps ensure the JSII kernel & runtime cooperate correctly when an un-exported instance of a class is returned with a declared type that is an exported interface, and the instance inherits from an exported class.
//
// Returns: an instance of an un-exported class that extends \`ExportedBaseClass\`, declared as \`IPrivatelyImplemented\`.
// See: https://github.com/aws/jsii/issues/320
//
// Struct proxy
type ReturnsPrivateImplementationOfInterface struct {
    jsiiObjInstanceId string
    PrivateImplementation IPrivatelyImplemented
}

func (r *ReturnsPrivateImplementationOfInterface) GetPrivateImplementation() IPrivatelyImplemented {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "privateImplementation",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: r.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return r.PrivateImplementation
}


func (obj *ReturnsPrivateImplementationOfInterface) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewReturnsPrivateImplementationOfInterface() ReturnsPrivateImplementationOfInterfaceIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.ReturnsPrivateImplementationOfInterface",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := ReturnsPrivateImplementationOfInterface{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (r *ReturnsPrivateImplementationOfInterface) SetPrivateImplementation(val IPrivatelyImplemented) {
    r.PrivateImplementation = val
}

// RootStructIface is the public interface for the custom type RootStruct
type RootStructIface interface {
    GetStringProp() string
    GetNestedStruct() NestedStruct
}

// This is here to check that we can pass a nested struct into a kwargs by specifying it as an in-line dictionary.
// 
// This is cheating with the (current) declared types, but this is the "more
// idiomatic" way for Pythonists.
// Struct proxy
type RootStruct struct {
    jsiiObjInstanceId string
    // May not be empty.
    StringProp string
    NestedStruct NestedStruct
}

func (r *RootStruct) GetStringProp() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "stringProp",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: r.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return r.StringProp
}

func (r *RootStruct) GetNestedStruct() NestedStruct {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "nestedStruct",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: r.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return r.NestedStruct
}


func (obj *RootStruct) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Class interface
type RootStructValidatorIface interface {
}

// Struct proxy
type RootStructValidator struct {
    jsiiObjInstanceId string
}

func (obj *RootStructValidator) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func RootStructValidator_Validate(struct_ RootStruct) {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.RootStructValidator",
        Method: "validate",
        Args: []interface{}{struct_},
    })
    if err != nil {
        panic(err)
    }
}

// Class interface
type RuntimeTypeCheckingIface interface {
    MethodWithDefaultedArguments(arg1 float64, arg2 string, arg3 string)
    MethodWithOptionalAnyArgument(arg __JSII__.Any)
    MethodWithOptionalArguments(arg1 float64, arg2 string, arg3 string)
}

// Struct proxy
type RuntimeTypeChecking struct {
    jsiiObjInstanceId string
}

func (obj *RuntimeTypeChecking) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewRuntimeTypeChecking() RuntimeTypeCheckingIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.RuntimeTypeChecking",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := RuntimeTypeChecking{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (r *RuntimeTypeChecking) MethodWithDefaultedArguments(arg1 float64, arg2 string, arg3 string) {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "methodWithDefaultedArguments",
        Args: []interface{}{arg1, arg2, arg3},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: r.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (r *RuntimeTypeChecking) MethodWithOptionalAnyArgument(arg __JSII__.Any) {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "methodWithOptionalAnyArgument",
        Args: []interface{}{arg},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: r.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (r *RuntimeTypeChecking) MethodWithOptionalArguments(arg1 float64, arg2 string, arg3 string) {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "methodWithOptionalArguments",
        Args: []interface{}{arg1, arg2, arg3},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: r.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

// SecondLevelStructIface is the public interface for the custom type SecondLevelStruct
type SecondLevelStructIface interface {
    GetDeeperRequiredProp() string
    GetDeeperOptionalProp() string
}

// Struct proxy
type SecondLevelStruct struct {
    jsiiObjInstanceId string
    // It's long and required.
    DeeperRequiredProp string
    // It's long, but you'll almost never pass it.
    DeeperOptionalProp string
}

func (s *SecondLevelStruct) GetDeeperRequiredProp() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "deeperRequiredProp",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.DeeperRequiredProp
}

func (s *SecondLevelStruct) GetDeeperOptionalProp() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "deeperOptionalProp",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.DeeperOptionalProp
}


func (obj *SecondLevelStruct) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Class interface
type SingleInstanceTwoTypesIface interface {
    Interface1() InbetweenClass
    Interface2() IPublicInterface
}

// Test that a single instance can be returned under two different FQNs.
// 
// JSII clients can instantiate 2 different strongly-typed wrappers for the same
// object. Unfortunately, this will break object equality, but if we didn't do
// this it would break runtime type checks in the JVM or CLR.
// Struct proxy
type SingleInstanceTwoTypes struct {
    jsiiObjInstanceId string
}

func (obj *SingleInstanceTwoTypes) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewSingleInstanceTwoTypes() SingleInstanceTwoTypesIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.SingleInstanceTwoTypes",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := SingleInstanceTwoTypes{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (s *SingleInstanceTwoTypes) Interface1() InbetweenClass {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "interface1",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return InbetweenClass{}
}

func (s *SingleInstanceTwoTypes) Interface2() IPublicInterface {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "interface2",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return nil
}

// Class interface
type SingletonIntIface interface {
    IsSingletonInt(value float64) bool
}

// Verifies that singleton enums are handled correctly.
// 
// https://github.com/aws/jsii/issues/231
// Struct proxy
type SingletonInt struct {
    jsiiObjInstanceId string
}

func (obj *SingletonInt) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func (s *SingletonInt) IsSingletonInt(value float64) bool {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "isSingletonInt",
        Args: []interface{}{value},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return true
}

// A singleton integer.
type SingletonIntEnum string

const (
    SingletonIntEnumSingletonInt SingletonIntEnum = "SINGLETON_INT"
)

// Class interface
type SingletonStringIface interface {
    IsSingletonString(value string) bool
}

// Verifies that singleton enums are handled correctly.
// 
// https://github.com/aws/jsii/issues/231
// Struct proxy
type SingletonString struct {
    jsiiObjInstanceId string
}

func (obj *SingletonString) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func (s *SingletonString) IsSingletonString(value string) bool {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "isSingletonString",
        Args: []interface{}{value},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return true
}

// A singleton string.
type SingletonStringEnum string

const (
    SingletonStringEnumSingletonString SingletonStringEnum = "SINGLETON_STRING"
)

// SmellyStructIface is the public interface for the custom type SmellyStruct
type SmellyStructIface interface {
    GetProperty() string
    GetYetAnoterOne() bool
}

// Struct proxy
type SmellyStruct struct {
    jsiiObjInstanceId string
    Property string
    YetAnoterOne bool
}

func (s *SmellyStruct) GetProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "property",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.Property
}

func (s *SmellyStruct) GetYetAnoterOne() bool {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "yetAnoterOne",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.YetAnoterOne
}


func (obj *SmellyStruct) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Class interface
type SomeTypeJsii976Iface interface {
}

// Struct proxy
type SomeTypeJsii976 struct {
    jsiiObjInstanceId string
}

func (obj *SomeTypeJsii976) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewSomeTypeJsii976() SomeTypeJsii976Iface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.SomeTypeJsii976",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := SomeTypeJsii976{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func SomeTypeJsii976_ReturnAnonymous() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.SomeTypeJsii976",
        Method: "returnAnonymous",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func SomeTypeJsii976_ReturnReturn() IReturnJsii976 {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.SomeTypeJsii976",
        Method: "returnReturn",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return nil
}

// Class interface
type StableClassIface interface {
    GetReadonlyProperty() string
    SetReadonlyProperty(val string)
    GetMutableProperty() float64
    SetMutableProperty(val float64)
    Method()
}

// Struct proxy
type StableClass struct {
    jsiiObjInstanceId string
    ReadonlyProperty string
    MutableProperty float64
}

func (s *StableClass) GetReadonlyProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "readonlyProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.ReadonlyProperty
}

func (s *StableClass) GetMutableProperty() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "mutableProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.MutableProperty
}


func (obj *StableClass) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewStableClass(readonlyString string, mutableNumber float64) StableClassIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.StableClass",
        Interfaces: []string{},
        Args: []interface{}{readonlyString, mutableNumber},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := StableClass{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (s *StableClass) SetReadonlyProperty(val string) {
    s.ReadonlyProperty = val
}

func (s *StableClass) SetMutableProperty(val float64) {
    s.MutableProperty = val
}

func (s *StableClass) Method() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "method",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

type StableEnum string

const (
    StableEnumOptionA StableEnum = "OPTION_A"
    StableEnumOptionB StableEnum = "OPTION_B"
)

// StableStructIface is the public interface for the custom type StableStruct
type StableStructIface interface {
    GetReadonlyProperty() string
}

// Struct proxy
type StableStruct struct {
    jsiiObjInstanceId string
    ReadonlyProperty string
}

func (s *StableStruct) GetReadonlyProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "readonlyProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.ReadonlyProperty
}


func (obj *StableStruct) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Class interface
type StaticContextIface interface {
    GetStaticVariable() bool
    SetStaticVariable(val bool)
}

// This is used to validate the ability to use \`this\` from within a static context.
// 
// https://github.com/awslabs/aws-cdk/issues/2304
// Struct proxy
type StaticContext struct {
    jsiiObjInstanceId string
    StaticVariable bool
}

func (s *StaticContext) GetStaticVariable() bool {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "staticVariable",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.StaticVariable
}


func (obj *StaticContext) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func (s *StaticContext) SetStaticVariable(val bool) {
    s.StaticVariable = val
}

func StaticContext_CanAccessStaticContext() bool {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.StaticContext",
        Method: "canAccessStaticContext",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return true
}

// Class interface
type StaticsIface interface {
    GetBar() float64
    SetBar(val float64)
    GetConstObj() DoubleTrouble
    SetConstObj(val DoubleTrouble)
    GetFoo() string
    SetFoo(val string)
    GetZooBar() map[string]string
    SetZooBar(val map[string]string)
    GetInstance() Statics
    SetInstance(val Statics)
    GetNonConstStatic() float64
    SetNonConstStatic(val float64)
    GetValue() string
    SetValue(val string)
    JustMethod() string
}

// Struct proxy
type Statics struct {
    jsiiObjInstanceId string
    // Constants may also use all-caps.
    Bar float64
    ConstObj DoubleTrouble
    // Jsdocs for static property.
    Foo string
    // Constants can also use camelCase.
    ZooBar map[string]string
    // Jsdocs for static getter.
    // 
    // Jsdocs for static setter.
    Instance *Statics
    NonConstStatic float64
    Value string
}

func (s *Statics) GetBar() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "BAR",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.Bar
}

func (s *Statics) GetConstObj() DoubleTrouble {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "ConstObj",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.ConstObj
}

func (s *Statics) GetFoo() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "Foo",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.Foo
}

func (s *Statics) GetZooBar() map[string]string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "zooBar",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.ZooBar
}

func (s *Statics) GetInstance() Statics {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "instance",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return *s.Instance
}

func (s *Statics) GetNonConstStatic() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "nonConstStatic",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.NonConstStatic
}

func (s *Statics) GetValue() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "value",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.Value
}


func (obj *Statics) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewStatics(value string) StaticsIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.Statics",
        Interfaces: []string{},
        Args: []interface{}{value},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := Statics{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (s *Statics) SetBar(val float64) {
    s.Bar = val
}

func (s *Statics) SetConstObj(val DoubleTrouble) {
    s.ConstObj = val
}

func (s *Statics) SetFoo(val string) {
    s.Foo = val
}

func (s *Statics) SetZooBar(val map[string]string) {
    s.ZooBar = val
}

func (s *Statics) SetInstance(val Statics) {
    s.Instance = &val
}

func (s *Statics) SetNonConstStatic(val float64) {
    s.NonConstStatic = val
}

func (s *Statics) SetValue(val string) {
    s.Value = val
}

func Statics_StaticMethod(name string) string {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.Statics",
        Method: "staticMethod",
        Args: []interface{}{name},
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

func (s *Statics) JustMethod() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "justMethod",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

type StringEnum string

const (
    StringEnumA StringEnum = "A"
    StringEnumB StringEnum = "B"
    StringEnumC StringEnum = "C"
)

// Class interface
type StripInternalIface interface {
    GetYouSeeMe() string
    SetYouSeeMe(val string)
}

// Struct proxy
type StripInternal struct {
    jsiiObjInstanceId string
    YouSeeMe string
}

func (s *StripInternal) GetYouSeeMe() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "youSeeMe",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.YouSeeMe
}


func (obj *StripInternal) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewStripInternal() StripInternalIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.StripInternal",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := StripInternal{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (s *StripInternal) SetYouSeeMe(val string) {
    s.YouSeeMe = val
}

// StructAIface is the public interface for the custom type StructA
type StructAIface interface {
    GetRequiredString() string
    GetOptionalNumber() float64
    GetOptionalString() string
}

// We can serialize and deserialize structs without silently ignoring optional fields.
// Struct proxy
type StructA struct {
    jsiiObjInstanceId string
    RequiredString string
    OptionalNumber float64
    OptionalString string
}

func (s *StructA) GetRequiredString() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "requiredString",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.RequiredString
}

func (s *StructA) GetOptionalNumber() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "optionalNumber",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.OptionalNumber
}

func (s *StructA) GetOptionalString() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "optionalString",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.OptionalString
}


func (obj *StructA) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// StructBIface is the public interface for the custom type StructB
type StructBIface interface {
    GetRequiredString() string
    GetOptionalBoolean() bool
    GetOptionalStructA() StructA
}

// This intentionally overlaps with StructA (where only requiredString is provided) to test htat the kernel properly disambiguates those.
// Struct proxy
type StructB struct {
    jsiiObjInstanceId string
    RequiredString string
    OptionalBoolean bool
    OptionalStructA StructA
}

func (s *StructB) GetRequiredString() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "requiredString",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.RequiredString
}

func (s *StructB) GetOptionalBoolean() bool {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "optionalBoolean",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.OptionalBoolean
}

func (s *StructB) GetOptionalStructA() StructA {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "optionalStructA",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.OptionalStructA
}


func (obj *StructB) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// StructParameterTypeIface is the public interface for the custom type StructParameterType
type StructParameterTypeIface interface {
    GetScope() string
    GetProps() bool
}

// Verifies that, in languages that do keyword lifting (e.g: Python), having a struct member with the same name as a positional parameter results in the correct code being emitted.
// 
// See: https://github.com/aws/aws-cdk/issues/4302
// Struct proxy
type StructParameterType struct {
    jsiiObjInstanceId string
    Scope string
    Props bool
}

func (s *StructParameterType) GetScope() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "scope",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.Scope
}

func (s *StructParameterType) GetProps() bool {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "props",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.Props
}


func (obj *StructParameterType) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Class interface
type StructPassingIface interface {
}

// Just because we can.
// Struct proxy
type StructPassing struct {
    jsiiObjInstanceId string
}

func (obj *StructPassing) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewStructPassing() StructPassingIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.StructPassing",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := StructPassing{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func StructPassing_HowManyVarArgsDidIPass(_positional float64, inputs TopLevelStruct) float64 {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.StructPassing",
        Method: "howManyVarArgsDidIPass",
        Args: []interface{}{_positional, inputs},
    })
    if err != nil {
        panic(err)
    }
    return 0.0
}

func StructPassing_RoundTrip(_positional float64, input TopLevelStruct) TopLevelStruct {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.StructPassing",
        Method: "roundTrip",
        Args: []interface{}{_positional, input},
    })
    if err != nil {
        panic(err)
    }
    return TopLevelStruct{}
}

// Class interface
type StructUnionConsumerIface interface {
}

// Struct proxy
type StructUnionConsumer struct {
    jsiiObjInstanceId string
}

func (obj *StructUnionConsumer) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func StructUnionConsumer_IsStructA(struct_ __JSII__.Any) bool {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.StructUnionConsumer",
        Method: "isStructA",
        Args: []interface{}{struct_},
    })
    if err != nil {
        panic(err)
    }
    return true
}

func StructUnionConsumer_IsStructB(struct_ __JSII__.Any) bool {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.StructUnionConsumer",
        Method: "isStructB",
        Args: []interface{}{struct_},
    })
    if err != nil {
        panic(err)
    }
    return true
}

// StructWithJavaReservedWordsIface is the public interface for the custom type StructWithJavaReservedWords
type StructWithJavaReservedWordsIface interface {
    GetDefault() string
    GetAssert() string
    GetResult() string
    GetThat() string
}

// Struct proxy
type StructWithJavaReservedWords struct {
    jsiiObjInstanceId string
    Default string
    Assert string
    Result string
    That string
}

func (s *StructWithJavaReservedWords) GetDefault() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "default",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.Default
}

func (s *StructWithJavaReservedWords) GetAssert() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "assert",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.Assert
}

func (s *StructWithJavaReservedWords) GetResult() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "result",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.Result
}

func (s *StructWithJavaReservedWords) GetThat() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "that",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.That
}


func (obj *StructWithJavaReservedWords) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Class interface
type SumIface interface {
    GetValue() float64
    SetValue(val float64)
    GetExpression() scopejsiicalclib.NumericValue
    SetExpression(val scopejsiicalclib.NumericValue)
    GetDecorationPostfixes() []string
    SetDecorationPostfixes(val []string)
    GetDecorationPrefixes() []string
    SetDecorationPrefixes(val []string)
    GetStringStyle() composition.CompositionStringStyle
    SetStringStyle(val composition.CompositionStringStyle)
    GetParts() []scopejsiicalclib.NumericValue
    SetParts(val []scopejsiicalclib.NumericValue)
    TypeName() __JSII__.Any
    ToString() string
}

// An operation that sums multiple values.
// Struct proxy
type Sum struct {
    jsiiObjInstanceId string
    // (deprecated) The value.
    Value float64
    // The expression that this operation consists of.
    // 
    // Must be implemented by derived classes.
    Expression scopejsiicalclib.NumericValue
    // A set of postfixes to include in a decorated .toString().
    DecorationPostfixes []string
    // A set of prefixes to include in a decorated .toString().
    DecorationPrefixes []string
    // The .toString() style.
    StringStyle composition.CompositionStringStyle
    // The parts to sum.
    Parts []scopejsiicalclib.NumericValue
}

func (s *Sum) GetValue() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "value",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.Value
}

func (s *Sum) GetExpression() scopejsiicalclib.NumericValue {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "expression",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.Expression
}

func (s *Sum) GetDecorationPostfixes() []string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "decorationPostfixes",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.DecorationPostfixes
}

func (s *Sum) GetDecorationPrefixes() []string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "decorationPrefixes",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.DecorationPrefixes
}

func (s *Sum) GetStringStyle() composition.CompositionStringStyle {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "stringStyle",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.StringStyle
}

func (s *Sum) GetParts() []scopejsiicalclib.NumericValue {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "parts",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.Parts
}


func (obj *Sum) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewSum() SumIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.Sum",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := Sum{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (s *Sum) SetValue(val float64) {
    s.Value = val
}

func (s *Sum) SetExpression(val scopejsiicalclib.NumericValue) {
    s.Expression = val
}

func (s *Sum) SetDecorationPostfixes(val []string) {
    s.DecorationPostfixes = val
}

func (s *Sum) SetDecorationPrefixes(val []string) {
    s.DecorationPrefixes = val
}

func (s *Sum) SetStringStyle(val composition.CompositionStringStyle) {
    s.StringStyle = val
}

func (s *Sum) SetParts(val []scopejsiicalclib.NumericValue) {
    s.Parts = val
}

func (s *Sum) TypeName() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "typeName",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func (s *Sum) ToString() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "toString",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

// Class interface
type SupportsNiceJavaBuilderIface interface {
    GetBar() float64
    SetBar(val float64)
    GetId() float64
    SetId(val float64)
    GetPropId() string
    SetPropId(val string)
    GetRest() []string
    SetRest(val []string)
}

// Struct proxy
type SupportsNiceJavaBuilder struct {
    jsiiObjInstanceId string
    Bar float64
    // some identifier.
    Id float64
    PropId string
    Rest []string
}

func (s *SupportsNiceJavaBuilder) GetBar() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "bar",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.Bar
}

func (s *SupportsNiceJavaBuilder) GetId() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "id",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.Id
}

func (s *SupportsNiceJavaBuilder) GetPropId() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "propId",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.PropId
}

func (s *SupportsNiceJavaBuilder) GetRest() []string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "rest",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.Rest
}


func (obj *SupportsNiceJavaBuilder) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewSupportsNiceJavaBuilder(id float64, defaultBar float64, props SupportsNiceJavaBuilderProps, rest string) SupportsNiceJavaBuilderIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.SupportsNiceJavaBuilder",
        Interfaces: []string{},
        Args: []interface{}{id, defaultBar, props, rest},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := SupportsNiceJavaBuilder{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (s *SupportsNiceJavaBuilder) SetBar(val float64) {
    s.Bar = val
}

func (s *SupportsNiceJavaBuilder) SetId(val float64) {
    s.Id = val
}

func (s *SupportsNiceJavaBuilder) SetPropId(val string) {
    s.PropId = val
}

func (s *SupportsNiceJavaBuilder) SetRest(val []string) {
    s.Rest = val
}

// SupportsNiceJavaBuilderPropsIface is the public interface for the custom type SupportsNiceJavaBuilderProps
type SupportsNiceJavaBuilderPropsIface interface {
    GetBar() float64
    GetId() string
}

// Struct proxy
type SupportsNiceJavaBuilderProps struct {
    jsiiObjInstanceId string
    // Some number, like 42.
    Bar float64
    // An \`id\` field here is terrible API design, because the constructor of \`SupportsNiceJavaBuilder\` already has a parameter named \`id\`.
    // 
    // But here we are, doing it like we didn't care.
    Id string
}

func (s *SupportsNiceJavaBuilderProps) GetBar() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "bar",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.Bar
}

func (s *SupportsNiceJavaBuilderProps) GetId() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "id",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.Id
}


func (obj *SupportsNiceJavaBuilderProps) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Class interface
type SupportsNiceJavaBuilderWithRequiredPropsIface interface {
    GetBar() float64
    SetBar(val float64)
    GetId() float64
    SetId(val float64)
    GetPropId() string
    SetPropId(val string)
}

// We can generate fancy builders in Java for classes which take a mix of positional & struct parameters.
// Struct proxy
type SupportsNiceJavaBuilderWithRequiredProps struct {
    jsiiObjInstanceId string
    Bar float64
    // some identifier of your choice.
    Id float64
    PropId string
}

func (s *SupportsNiceJavaBuilderWithRequiredProps) GetBar() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "bar",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.Bar
}

func (s *SupportsNiceJavaBuilderWithRequiredProps) GetId() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "id",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.Id
}

func (s *SupportsNiceJavaBuilderWithRequiredProps) GetPropId() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "propId",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.PropId
}


func (obj *SupportsNiceJavaBuilderWithRequiredProps) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewSupportsNiceJavaBuilderWithRequiredProps(id float64, props SupportsNiceJavaBuilderProps) SupportsNiceJavaBuilderWithRequiredPropsIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.SupportsNiceJavaBuilderWithRequiredProps",
        Interfaces: []string{},
        Args: []interface{}{id, props},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := SupportsNiceJavaBuilderWithRequiredProps{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (s *SupportsNiceJavaBuilderWithRequiredProps) SetBar(val float64) {
    s.Bar = val
}

func (s *SupportsNiceJavaBuilderWithRequiredProps) SetId(val float64) {
    s.Id = val
}

func (s *SupportsNiceJavaBuilderWithRequiredProps) SetPropId(val string) {
    s.PropId = val
}

// Class interface
type SyncVirtualMethodsIface interface {
    GetReadonlyProperty() string
    SetReadonlyProperty(val string)
    GetA() float64
    SetA(val float64)
    GetCallerIsProperty() float64
    SetCallerIsProperty(val float64)
    GetOtherProperty() string
    SetOtherProperty(val string)
    GetTheProperty() string
    SetTheProperty(val string)
    GetValueOfOtherProperty() string
    SetValueOfOtherProperty(val string)
    CallerIsAsync() float64
    CallerIsMethod() float64
    ModifyOtherProperty(value string)
    ModifyValueOfTheProperty(value string)
    ReadA() float64
    RetrieveOtherProperty() string
    RetrieveReadOnlyProperty() string
    RetrieveValueOfTheProperty() string
    VirtualMethod(n float64) float64
    WriteA(value float64)
}

// Struct proxy
type SyncVirtualMethods struct {
    jsiiObjInstanceId string
    ReadonlyProperty string
    A float64
    CallerIsProperty float64
    OtherProperty string
    TheProperty string
    ValueOfOtherProperty string
}

func (s *SyncVirtualMethods) GetReadonlyProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "readonlyProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.ReadonlyProperty
}

func (s *SyncVirtualMethods) GetA() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "a",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.A
}

func (s *SyncVirtualMethods) GetCallerIsProperty() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "callerIsProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.CallerIsProperty
}

func (s *SyncVirtualMethods) GetOtherProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "otherProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.OtherProperty
}

func (s *SyncVirtualMethods) GetTheProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "theProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.TheProperty
}

func (s *SyncVirtualMethods) GetValueOfOtherProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "valueOfOtherProperty",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.ValueOfOtherProperty
}


func (obj *SyncVirtualMethods) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewSyncVirtualMethods() SyncVirtualMethodsIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.SyncVirtualMethods",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := SyncVirtualMethods{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (s *SyncVirtualMethods) SetReadonlyProperty(val string) {
    s.ReadonlyProperty = val
}

func (s *SyncVirtualMethods) SetA(val float64) {
    s.A = val
}

func (s *SyncVirtualMethods) SetCallerIsProperty(val float64) {
    s.CallerIsProperty = val
}

func (s *SyncVirtualMethods) SetOtherProperty(val string) {
    s.OtherProperty = val
}

func (s *SyncVirtualMethods) SetTheProperty(val string) {
    s.TheProperty = val
}

func (s *SyncVirtualMethods) SetValueOfOtherProperty(val string) {
    s.ValueOfOtherProperty = val
}

func (s *SyncVirtualMethods) CallerIsAsync() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "callerIsAsync",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return 0.0
}

func (s *SyncVirtualMethods) CallerIsMethod() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "callerIsMethod",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return 0.0
}

func (s *SyncVirtualMethods) ModifyOtherProperty(value string) {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "modifyOtherProperty",
        Args: []interface{}{value},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (s *SyncVirtualMethods) ModifyValueOfTheProperty(value string) {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "modifyValueOfTheProperty",
        Args: []interface{}{value},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (s *SyncVirtualMethods) ReadA() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "readA",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return 0.0
}

func (s *SyncVirtualMethods) RetrieveOtherProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "retrieveOtherProperty",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

func (s *SyncVirtualMethods) RetrieveReadOnlyProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "retrieveReadOnlyProperty",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

func (s *SyncVirtualMethods) RetrieveValueOfTheProperty() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "retrieveValueOfTheProperty",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

func (s *SyncVirtualMethods) VirtualMethod(n float64) float64 {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "virtualMethod",
        Args: []interface{}{n},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return 0.0
}

func (s *SyncVirtualMethods) WriteA(value float64) {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "writeA",
        Args: []interface{}{value},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

// Class interface
type ThrowerIface interface {
    ThrowError()
}

// Struct proxy
type Thrower struct {
    jsiiObjInstanceId string
}

func (obj *Thrower) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewThrower() ThrowerIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.Thrower",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := Thrower{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (t *Thrower) ThrowError() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "throwError",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: t.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

// TopLevelStructIface is the public interface for the custom type TopLevelStruct
type TopLevelStructIface interface {
    GetRequired() string
    GetSecondLevel() __JSII__.Any
    GetOptional() string
}

// Struct proxy
type TopLevelStruct struct {
    jsiiObjInstanceId string
    // This is a required field.
    Required string
    // A union to really stress test our serialization.
    SecondLevel __JSII__.Any
    // You don't have to pass this.
    Optional string
}

func (t *TopLevelStruct) GetRequired() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "required",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: t.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return t.Required
}

func (t *TopLevelStruct) GetSecondLevel() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "secondLevel",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: t.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return t.SecondLevel
}

func (t *TopLevelStruct) GetOptional() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "optional",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: t.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return t.Optional
}


func (obj *TopLevelStruct) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Class interface
type UmaskCheckIface interface {
}

// Checks the current file permissions are cool (no funky UMASK down-scoping happened).
// See: https://github.com/aws/jsii/issues/1765
//
// Struct proxy
type UmaskCheck struct {
    jsiiObjInstanceId string
}

func (obj *UmaskCheck) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func UmaskCheck_Mode() float64 {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.UmaskCheck",
        Method: "mode",
        Args: []interface{}{},
    })
    if err != nil {
        panic(err)
    }
    return 0.0
}

// Class interface
type UnaryOperationIface interface {
    GetValue() float64
    SetValue(val float64)
    GetOperand() scopejsiicalclib.NumericValue
    SetOperand(val scopejsiicalclib.NumericValue)
    TypeName() __JSII__.Any
    ToString() string
}

// An operation on a single operand.
// Struct proxy
type UnaryOperation struct {
    jsiiObjInstanceId string
    // The value.
    // Deprecated.
    Value float64
    Operand scopejsiicalclib.NumericValue
}

func (u *UnaryOperation) GetValue() float64 {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "value",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: u.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return u.Value
}

func (u *UnaryOperation) GetOperand() scopejsiicalclib.NumericValue {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "operand",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: u.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return u.Operand
}


func (obj *UnaryOperation) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewUnaryOperation(operand scopejsiicalclib.NumericValue) UnaryOperationIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.UnaryOperation",
        Interfaces: []string{},
        Args: []interface{}{operand},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := UnaryOperation{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (u *UnaryOperation) SetValue(val float64) {
    u.Value = val
}

func (u *UnaryOperation) SetOperand(val scopejsiicalclib.NumericValue) {
    u.Operand = val
}

func (u *UnaryOperation) TypeName() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "typeName",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: u.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return nil
}

func (u *UnaryOperation) ToString() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "toString",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: u.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

// UnionPropertiesIface is the public interface for the custom type UnionProperties
type UnionPropertiesIface interface {
    GetBar() __JSII__.Any
    GetFoo() __JSII__.Any
}

// Struct proxy
type UnionProperties struct {
    jsiiObjInstanceId string
    Bar __JSII__.Any
    Foo __JSII__.Any
}

func (u *UnionProperties) GetBar() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "bar",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: u.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return u.Bar
}

func (u *UnionProperties) GetFoo() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "foo",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: u.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return u.Foo
}


func (obj *UnionProperties) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Class interface
type UpcasingReflectableIface interface {
    submodule.IReflectable
    GetReflector() submodule.Reflector
    SetReflector(val submodule.Reflector)
    GetEntries() []submodule.ReflectableEntry
    SetEntries(val []submodule.ReflectableEntry)
}

// Ensures submodule-imported types from dependencies can be used correctly.
// Struct proxy
type UpcasingReflectable struct {
    jsiiObjInstanceId string
    Reflector submodule.Reflector
    Entries []submodule.ReflectableEntry
}

func (u *UpcasingReflectable) GetReflector() submodule.Reflector {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "reflector",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: u.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return u.Reflector
}

func (u *UpcasingReflectable) GetEntries() []submodule.ReflectableEntry {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "entries",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: u.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return u.Entries
}


func (obj *UpcasingReflectable) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewUpcasingReflectable(delegate map[string]__JSII__.Any) UpcasingReflectableIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.UpcasingReflectable",
        Interfaces: []string{"@scope/jsii-calc-lib.submodule.IReflectable"},
        Args: []interface{}{delegate},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := UpcasingReflectable{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (u *UpcasingReflectable) SetReflector(val submodule.Reflector) {
    u.Reflector = val
}

func (u *UpcasingReflectable) SetEntries(val []submodule.ReflectableEntry) {
    u.Entries = val
}

// Class interface
type UseBundledDependencyIface interface {
    Value() __JSII__.Any
}

// Struct proxy
type UseBundledDependency struct {
    jsiiObjInstanceId string
}

func (obj *UseBundledDependency) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewUseBundledDependency() UseBundledDependencyIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.UseBundledDependency",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := UseBundledDependency{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (u *UseBundledDependency) Value() __JSII__.Any {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "value",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: u.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return nil
}

// Class interface
type UseCalcBaseIface interface {
    Hello() scopejsiicalcbase.Base
}

// Depend on a type from jsii-calc-base as a test for awslabs/jsii#128.
// Struct proxy
type UseCalcBase struct {
    jsiiObjInstanceId string
}

func (obj *UseCalcBase) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewUseCalcBase() UseCalcBaseIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.UseCalcBase",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := UseCalcBase{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (u *UseCalcBase) Hello() scopejsiicalcbase.Base {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "hello",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: u.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return scopejsiicalcbase.Base{}
}

// Class interface
type UsesInterfaceWithPropertiesIface interface {
    GetObj() IInterfaceWithProperties
    SetObj(val IInterfaceWithProperties)
    JustRead() string
    ReadStringAndNumber(ext IInterfaceWithPropertiesExtension) string
    WriteAndRead(value string) string
}

// Struct proxy
type UsesInterfaceWithProperties struct {
    jsiiObjInstanceId string
    Obj IInterfaceWithProperties
}

func (u *UsesInterfaceWithProperties) GetObj() IInterfaceWithProperties {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "obj",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: u.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return u.Obj
}


func (obj *UsesInterfaceWithProperties) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewUsesInterfaceWithProperties(obj IInterfaceWithProperties) UsesInterfaceWithPropertiesIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.UsesInterfaceWithProperties",
        Interfaces: []string{},
        Args: []interface{}{obj},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := UsesInterfaceWithProperties{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (u *UsesInterfaceWithProperties) SetObj(val IInterfaceWithProperties) {
    u.Obj = val
}

func (u *UsesInterfaceWithProperties) JustRead() string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "justRead",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: u.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

func (u *UsesInterfaceWithProperties) ReadStringAndNumber(ext IInterfaceWithPropertiesExtension) string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "readStringAndNumber",
        Args: []interface{}{ext},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: u.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

func (u *UsesInterfaceWithProperties) WriteAndRead(value string) string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "writeAndRead",
        Args: []interface{}{value},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: u.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

// Class interface
type VariadicInvokerIface interface {
    AsArray(values float64) []float64
}

// Struct proxy
type VariadicInvoker struct {
    jsiiObjInstanceId string
}

func (obj *VariadicInvoker) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewVariadicInvoker(method VariadicMethod) VariadicInvokerIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.VariadicInvoker",
        Interfaces: []string{},
        Args: []interface{}{method},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := VariadicInvoker{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (v *VariadicInvoker) AsArray(values float64) []float64 {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "asArray",
        Args: []interface{}{values},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: v.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return nil
}

// Class interface
type VariadicMethodIface interface {
    AsArray(first float64, others float64) []float64
}

// Struct proxy
type VariadicMethod struct {
    jsiiObjInstanceId string
}

func (obj *VariadicMethod) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewVariadicMethod(prefix float64) VariadicMethodIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.VariadicMethod",
        Interfaces: []string{},
        Args: []interface{}{prefix},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := VariadicMethod{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (v *VariadicMethod) AsArray(first float64, others float64) []float64 {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "asArray",
        Args: []interface{}{first, others},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: v.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return nil
}

// Class interface
type VirtualMethodPlaygroundIface interface {
    OverrideMeAsync(index float64) float64
    OverrideMeSync(index float64) float64
    ParallelSumAsync(count float64) float64
    SerialSumAsync(count float64) float64
    SumSync(count float64) float64
}

// Struct proxy
type VirtualMethodPlayground struct {
    jsiiObjInstanceId string
}

func (obj *VirtualMethodPlayground) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewVirtualMethodPlayground() VirtualMethodPlaygroundIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.VirtualMethodPlayground",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := VirtualMethodPlayground{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (v *VirtualMethodPlayground) OverrideMeAsync(index float64) float64 {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "overrideMeAsync",
        Args: []interface{}{index},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: v.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return 0.0
}

func (v *VirtualMethodPlayground) OverrideMeSync(index float64) float64 {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "overrideMeSync",
        Args: []interface{}{index},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: v.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return 0.0
}

func (v *VirtualMethodPlayground) ParallelSumAsync(count float64) float64 {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "parallelSumAsync",
        Args: []interface{}{count},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: v.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return 0.0
}

func (v *VirtualMethodPlayground) SerialSumAsync(count float64) float64 {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "serialSumAsync",
        Args: []interface{}{count},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: v.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return 0.0
}

func (v *VirtualMethodPlayground) SumSync(count float64) float64 {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "sumSync",
        Args: []interface{}{count},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: v.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return 0.0
}

// Class interface
type VoidCallbackIface interface {
    GetMethodWasCalled() bool
    SetMethodWasCalled(val bool)
    CallMe()
    OverrideMe()
}

// This test is used to validate the runtimes can return correctly from a void callback.
// 
// - Implement \`overrideMe\` (method does not have to do anything).
// - Invoke \`callMe\`
// - Verify that \`methodWasCalled\` is \`true\`.
// Struct proxy
type VoidCallback struct {
    jsiiObjInstanceId string
    MethodWasCalled bool
}

func (v *VoidCallback) GetMethodWasCalled() bool {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "methodWasCalled",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: v.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return v.MethodWasCalled
}


func (obj *VoidCallback) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewVoidCallback() VoidCallbackIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.VoidCallback",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := VoidCallback{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (v *VoidCallback) SetMethodWasCalled(val bool) {
    v.MethodWasCalled = val
}

func (v *VoidCallback) CallMe() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "callMe",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: v.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

func (v *VoidCallback) OverrideMe() {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "overrideMe",
        Args: []interface{}{},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: v.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
}

// Class interface
type WithPrivatePropertyInConstructorIface interface {
    GetSuccess() bool
    SetSuccess(val bool)
}

// Verifies that private property declarations in constructor arguments are hidden.
// Struct proxy
type WithPrivatePropertyInConstructor struct {
    jsiiObjInstanceId string
    Success bool
}

func (w *WithPrivatePropertyInConstructor) GetSuccess() bool {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "success",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: w.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return w.Success
}


func (obj *WithPrivatePropertyInConstructor) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewWithPrivatePropertyInConstructor(privateField string) WithPrivatePropertyInConstructorIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.WithPrivatePropertyInConstructor",
        Interfaces: []string{},
        Args: []interface{}{privateField},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := WithPrivatePropertyInConstructor{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (w *WithPrivatePropertyInConstructor) SetSuccess(val bool) {
    w.Success = val
}


`;

exports[`Generated code for "jsii-calc": <outDir>/golang/jsiicalc/pythonself/pythonself.go 1`] = `
package pythonself

import (
    __JSII__ "github.com/aws-cdk/jsii/jsii-experimental"
)

// Class interface
type ClassWithSelfIface interface {
    GetSelf() string
    SetSelf(val string)
    Method(self float64) string
}

// Struct proxy
type ClassWithSelf struct {
    jsiiObjInstanceId string
    Self string
}

func (c *ClassWithSelf) GetSelf() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "self",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.Self
}


func (obj *ClassWithSelf) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewClassWithSelf(self string) ClassWithSelfIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.PythonSelf.ClassWithSelf",
        Interfaces: []string{},
        Args: []interface{}{self},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := ClassWithSelf{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (c *ClassWithSelf) SetSelf(val string) {
    c.Self = val
}

func (c *ClassWithSelf) Method(self float64) string {
    JSII_LOAD__()
    _, err := __JSII__.Invoke(__JSII__.InvokeRequest {
        Api: "invoke",
        Method: "method",
        Args: []interface{}{self},
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return "NOOP_RETURN_STRING"
}

// Class interface
type ClassWithSelfKwargIface interface {
    GetProps() StructWithSelf
    SetProps(val StructWithSelf)
}

// Struct proxy
type ClassWithSelfKwarg struct {
    jsiiObjInstanceId string
    Props StructWithSelf
}

func (c *ClassWithSelfKwarg) GetProps() StructWithSelf {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "props",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: c.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return c.Props
}


func (obj *ClassWithSelfKwarg) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewClassWithSelfKwarg(props StructWithSelf) ClassWithSelfKwargIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.PythonSelf.ClassWithSelfKwarg",
        Interfaces: []string{},
        Args: []interface{}{props},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := ClassWithSelfKwarg{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (c *ClassWithSelfKwarg) SetProps(val StructWithSelf) {
    c.Props = val
}

type IInterfaceWithSelf interface {
    Method(self float64) string
}

// StructWithSelfIface is the public interface for the custom type StructWithSelf
type StructWithSelfIface interface {
    GetSelf() string
}

// Struct proxy
type StructWithSelf struct {
    jsiiObjInstanceId string
    Self string
}

func (s *StructWithSelf) GetSelf() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "self",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.Self
}


func (obj *StructWithSelf) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}


`;

exports[`Generated code for "jsii-calc": <outDir>/golang/jsiicalc/submodule/backreferences.go 1`] = `
package backreferences

import (
    __JSII__ "github.com/aws-cdk/jsii/jsii-experimental"
    "github.com/aws-cdk/jsii/jsii-calc/golang/jsiicalc/submodule"
)

// MyClassReferenceIface is the public interface for the custom type MyClassReference
type MyClassReferenceIface interface {
    GetReference() submodule.MyClass
}

// Struct proxy
type MyClassReference struct {
    jsiiObjInstanceId string
    Reference submodule.MyClass
}

func (m *MyClassReference) GetReference() submodule.MyClass {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "reference",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: m.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return m.Reference
}


func (obj *MyClassReference) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}


`;

exports[`Generated code for "jsii-calc": <outDir>/golang/jsiicalc/submodule/child.go 1`] = `
package child

import (
    __JSII__ "github.com/aws-cdk/jsii/jsii-experimental"
)

type Awesomeness string

const (
    AwesomenessAwesome Awesomeness = "AWESOME"
)

type Goodness string

const (
    GoodnessPrettyGood Goodness = "PRETTY_GOOD"
    GoodnessReallyGood Goodness = "REALLY_GOOD"
    GoodnessAmazinglyGood Goodness = "AMAZINGLY_GOOD"
)

// Class interface
type InnerClassIface interface {
    GetStaticProp() SomeStruct
    SetStaticProp(val SomeStruct)
}

// Struct proxy
type InnerClass struct {
    jsiiObjInstanceId string
    StaticProp SomeStruct
}

func (i *InnerClass) GetStaticProp() SomeStruct {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "staticProp",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: i.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return i.StaticProp
}


func (obj *InnerClass) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewInnerClass() InnerClassIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.submodule.child.InnerClass",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := InnerClass{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (i *InnerClass) SetStaticProp(val SomeStruct) {
    i.StaticProp = val
}

// KwargsPropsIface is the public interface for the custom type KwargsProps
type KwargsPropsIface interface {
    GetProp() SomeEnum
    GetExtra() string
}

// Struct proxy
type KwargsProps struct {
    jsiiObjInstanceId string
    Prop SomeEnum
    Extra string
}

func (k *KwargsProps) GetProp() SomeEnum {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "prop",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: k.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return k.Prop
}

func (k *KwargsProps) GetExtra() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "extra",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: k.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return k.Extra
}


func (obj *KwargsProps) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// Class interface
type OuterClassIface interface {
    GetInnerClass() InnerClass
    SetInnerClass(val InnerClass)
}

// Checks that classes can self-reference during initialization.
// See: : https://github.com/aws/jsii/pull/1706
//
// Struct proxy
type OuterClass struct {
    jsiiObjInstanceId string
    InnerClass InnerClass
}

func (o *OuterClass) GetInnerClass() InnerClass {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "innerClass",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: o.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return o.InnerClass
}


func (obj *OuterClass) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewOuterClass() OuterClassIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.submodule.child.OuterClass",
        Interfaces: []string{},
        Args: []interface{}{},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := OuterClass{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (o *OuterClass) SetInnerClass(val InnerClass) {
    o.InnerClass = val
}

type SomeEnum string

const (
    SomeEnumSome SomeEnum = "SOME"
)

// SomeStructIface is the public interface for the custom type SomeStruct
type SomeStructIface interface {
    GetProp() SomeEnum
}

// Struct proxy
type SomeStruct struct {
    jsiiObjInstanceId string
    Prop SomeEnum
}

func (s *SomeStruct) GetProp() SomeEnum {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "prop",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.Prop
}


func (obj *SomeStruct) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

// StructureIface is the public interface for the custom type Structure
type StructureIface interface {
    GetBool() bool
}

// Struct proxy
type Structure struct {
    jsiiObjInstanceId string
    Bool bool
}

func (s *Structure) GetBool() bool {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "bool",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: s.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return s.Bool
}


func (obj *Structure) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}


`;

exports[`Generated code for "jsii-calc": <outDir>/golang/jsiicalc/submodule/deeplynested.go 1`] = `
package deeplynested

import (
    __JSII__ "github.com/aws-cdk/jsii/jsii-experimental"
)

type INamespaced interface {
    GetDefinedAt() string
}


`;

exports[`Generated code for "jsii-calc": <outDir>/golang/jsiicalc/submodule/isolated.go 1`] = `
package isolated

import (
    __JSII__ "github.com/aws-cdk/jsii/jsii-experimental"
)

// Class interface
type KwargsIface interface {
}

// Ensures imports are correctly registered for kwargs lifted properties from super-structs.
// Struct proxy
type Kwargs struct {
    jsiiObjInstanceId string
}

func (obj *Kwargs) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func Kwargs_Method(props child.KwargsProps) bool {
    JSII_LOAD__()
    _, err := __JSII__.StaticInvoke(__JSII__.StaticInvokeRequest {
        Api: "sinvoke",
        Fqn: "jsii-calc.submodule.isolated.Kwargs",
        Method: "method",
        Args: []interface{}{props},
    })
    if err != nil {
        panic(err)
    }
    return true
}


`;

exports[`Generated code for "jsii-calc": <outDir>/golang/jsiicalc/submodule/nestedsubmodule.go 1`] = `
package nestedsubmodule

import (
    __JSII__ "github.com/aws-cdk/jsii/jsii-experimental"
    "github.com/aws-cdk/jsii/jsii-calc/golang/jsiicalc/submodule"
)

// Class interface
type NamespacedIface interface {
    deeplynested.INamespaced
    GetDefinedAt() string
    SetDefinedAt(val string)
    GetGoodness() child.Goodness
    SetGoodness(val child.Goodness)
}

// Struct proxy
type Namespaced struct {
    jsiiObjInstanceId string
    DefinedAt string
    Goodness child.Goodness
}

func (n *Namespaced) GetDefinedAt() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "definedAt",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return n.DefinedAt
}

func (n *Namespaced) GetGoodness() child.Goodness {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "goodness",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: n.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return n.Goodness
}


func (obj *Namespaced) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func (n *Namespaced) SetDefinedAt(val string) {
    n.DefinedAt = val
}

func (n *Namespaced) SetGoodness(val child.Goodness) {
    n.Goodness = val
}


`;

exports[`Generated code for "jsii-calc": <outDir>/golang/jsiicalc/submodule/submodule.go 1`] = `
package submodule

import (
    __JSII__ "github.com/aws-cdk/jsii/jsii-experimental"
    "github.com/aws-cdk/jsii/jsii-calc/golang/jsiicalc/submodule"
    "github.com/aws-cdk/jsii/jsii-calc/golang/jsiicalc"
)

// Class interface
type MyClassIface interface {
    deeplynested.INamespaced
    GetAwesomeness() child.Awesomeness
    SetAwesomeness(val child.Awesomeness)
    GetDefinedAt() string
    SetDefinedAt(val string)
    GetGoodness() child.Goodness
    SetGoodness(val child.Goodness)
    GetProps() child.SomeStruct
    SetProps(val child.SomeStruct)
    GetAllTypes() jsiicalc.AllTypes
    SetAllTypes(val jsiicalc.AllTypes)
}

// Struct proxy
type MyClass struct {
    jsiiObjInstanceId string
    Awesomeness child.Awesomeness
    DefinedAt string
    Goodness child.Goodness
    Props child.SomeStruct
    AllTypes jsiicalc.AllTypes
}

func (m *MyClass) GetAwesomeness() child.Awesomeness {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "awesomeness",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: m.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return m.Awesomeness
}

func (m *MyClass) GetDefinedAt() string {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "definedAt",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: m.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return m.DefinedAt
}

func (m *MyClass) GetGoodness() child.Goodness {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "goodness",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: m.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return m.Goodness
}

func (m *MyClass) GetProps() child.SomeStruct {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "props",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: m.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return m.Props
}

func (m *MyClass) GetAllTypes() jsiicalc.AllTypes {
    JSII_LOAD__()
    _, err := __JSII__.Get(__JSII__.GetRequest {
        Api: "get",
        Property: "allTypes",
        ObjRef: __JSII__.ObjRef {
            JsiiInstanceId: m.GetInstanceId(),
        },
    })
    if err != nil {
        panic(err)
    }
    return m.AllTypes
}


func (obj *MyClass) GetInstanceId() string {
    return obj.jsiiObjInstanceId
}

func NewMyClass(props child.SomeStruct) MyClassIface {
    JSII_LOAD__()
    res, err := __JSII__.Create(__JSII__.CreateRequest {
        Api: "create",
        Fqn: "jsii-calc.submodule.MyClass",
        Interfaces: []string{"jsii-calc.submodule.nested_submodule.deeplyNested.INamespaced"},
        Args: []interface{}{props},
        Overrides: []__JSII__.Override{},
    })
    if err != nil {
        panic(err)
    }
    ret := MyClass{}
    ret.jsiiObjInstanceId = res.JsiiInstanceId
    return &ret
}

func (m *MyClass) SetAwesomeness(val child.Awesomeness) {
    m.Awesomeness = val
}

func (m *MyClass) SetDefinedAt(val string) {
    m.DefinedAt = val
}

func (m *MyClass) SetGoodness(val child.Goodness) {
    m.Goodness = val
}

func (m *MyClass) SetProps(val child.SomeStruct) {
    m.Props = val
}

func (m *MyClass) SetAllTypes(val jsiicalc.AllTypes) {
    m.AllTypes = val
}


`;
